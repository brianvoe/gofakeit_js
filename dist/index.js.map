{"version":3,"file":"index.js","sources":["../src/styles.ts","../src/api.ts","../src/input-datetime.ts","../src/input-text.ts","../src/input-misc.ts","../src/input-number.ts","../src/autofill.ts","../index.html?html-proxy&index=1.js"],"sourcesContent":["// Centralized style tokens for injected UI (avoid dependency on site CSS)\n\nexport const GOFAKEIT_COLORS = {\n\tprimary: '#ffa000',\n\twhite: '#ffffff',\n\tsuccess: '#48c774',\n\terror: '#ff3860',\n\tinfo: '#209cee',\n\ttext: '#ffffff',\n\tborder: '#686868',\n\tbackground: '#ffffff',\n};\n\nexport const GOFAKEIT_SPACING = {\n\tbase: 24, // px\n\thalf: 12, // px\n\tquarter: 8, // px\n};\n\nexport const GOFAKEIT_BORDER = {\n\tradius: 6, // px\n\twidth: 2, // px\n};\n\nexport const GOFAKEIT_FONT = {\n\tsize: 14, // px\n\tfamily: 'Helvetica, Arial, sans-serif',\n};\n","// Base URL for the Gofakeit API\nconst GOFAKEIT_API_BASE = 'https://api.gofakeit.com/funcs'\n\nexport interface ApiResponse {\n  success: boolean;\n  data?: string;\n  error?: string;\n  status?: number;\n}\n\n// Multi-function request interface\nexport interface MultiFuncRequest {\n  id?: string;\n  func: string;\n  params?: Record<string, unknown>;\n}\n\n// Multi-function response interface\nexport interface MultiFuncResponse {\n  id?: string;\n  value: string | null;\n  error: string;\n}\n\n// Multi-function API response interface\nexport interface MultiFuncApiResponse {\n  success: boolean;\n  data?: MultiFuncResponse[];\n  error?: string;\n  status?: number;\n}\n\n// Function search request interface\nexport interface FuncSearchRequest {\n  id: string;\n  query: string;\n}\n\n// Function search result interface\nexport interface FuncSearchResult {\n  name: string;     // function name for API usage\n  score: number;    // relevance score (0-100)\n  reasons: string[]; // why it matched\n}\n\n// Function search response interface\nexport interface FuncSearchResponse {\n  id: string;\n  query: string;\n  results: FuncSearchResult[];\n}\n\n// Multi-function search API response interface\nexport interface MultiFuncSearchApiResponse {\n  success: boolean;\n  data?: FuncSearchResponse[];\n  error?: string;\n  status?: number;\n}\n\n// Fetch data from gofakeit API\nexport async function callFunc(func: string): Promise<ApiResponse> {\n  // Check if the function contains query parameters\n  const questionMarkIndex = func.indexOf('?');\n  \n  if (questionMarkIndex !== -1) {\n    // Function has query parameters - use POST with JSON body\n    const functionName = func.substring(0, questionMarkIndex);\n    const queryString = func.substring(questionMarkIndex + 1);\n    \n    // Parse query parameters into an object\n    const params: Record<string, unknown> = {};\n    const searchParams = new URLSearchParams(queryString);\n    \n    for (const [key, value] of searchParams.entries()) {\n      // Try to parse as number if possible\n      const numValue = parseFloat(value);\n      params[key] = isNaN(numValue) ? value : numValue;\n    }\n    \n    return makeRequest('POST', `${GOFAKEIT_API_BASE}/${functionName}`, params);\n  } else {\n    // Simple function - use GET request\n    return makeRequest('GET', `${GOFAKEIT_API_BASE}/${func}`);\n  }\n}\n\n// Call multiple functions in a single request\nexport async function callMultiFunc(requests: MultiFuncRequest[]): Promise<MultiFuncApiResponse> {\n  if (requests.length === 0) {\n    return {\n      success: false,\n      error: 'No functions provided'\n    };\n  }\n\n  // Process each request to extract function name and parameters\n  const processedRequests: MultiFuncRequest[] = requests.map((req, index) => {\n    const { func, id } = req;\n    const questionMarkIndex = func.indexOf('?');\n    \n    if (questionMarkIndex !== -1) {\n      // Function has query parameters\n      const functionName = func.substring(0, questionMarkIndex);\n      const queryString = func.substring(questionMarkIndex + 1);\n      \n      // Parse query parameters into an object\n      const params: Record<string, unknown> = {};\n      const searchParams = new URLSearchParams(queryString);\n      \n      for (const [key, value] of searchParams.entries()) {\n        // Try to parse as number if possible\n        const numValue = parseFloat(value);\n        params[key] = isNaN(numValue) ? value : numValue;\n      }\n      \n      return {\n        id: id || `req_${index}`,\n        func: functionName,\n        params\n      };\n    } else {\n      // Simple function\n      return {\n        id: id || `req_${index}`,\n        func,\n        params: req.params\n      };\n    }\n  });\n\n  return makeMultiRequest('POST', `${GOFAKEIT_API_BASE}/multi`, processedRequests);\n}\n\n// Search for multiple functions in a single request\nexport async function searchMultiFunc(requests: FuncSearchRequest[]): Promise<MultiFuncSearchApiResponse> {\n  if (requests.length === 0) {\n    return {\n      success: false,\n      error: 'No search queries provided'\n    };\n  }\n\n  return makeSearchRequest('POST', `${GOFAKEIT_API_BASE}/search`, requests);\n}\n\n// Base HTTP request function\nasync function makeRequest(method: 'GET' | 'POST', url: string, body?: Record<string, unknown>): Promise<ApiResponse> {\n  try {\n    const options: {\n      method: string;\n      headers: Record<string, string>;\n      body?: string;\n    } = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (method === 'POST' && body) {\n      options.body = JSON.stringify(body);\n    }\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      return {\n        success: false,\n        error: `HTTP error! status: ${response.status}`,\n        status: response.status\n      };\n    }\n    \n    const data = await response.text();\n    return {\n      success: true,\n      data: data\n    };\n  } catch (error) {\n    console.error(`[Gofakeit Autofill] Error in ${method} request to ${url}:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Multi-function HTTP request function\nasync function makeMultiRequest(method: 'GET' | 'POST', url: string, body: MultiFuncRequest[]): Promise<MultiFuncApiResponse> {\n  try {\n    const options: {\n      method: string;\n      headers: Record<string, string>;\n      body: string;\n    } = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    };\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      return {\n        success: false,\n        error: `HTTP error! status: ${response.status}`,\n        status: response.status\n      };\n    }\n    \n    const data = await response.json();\n    return {\n      success: true,\n      data: data\n    };\n  } catch (error) {\n    console.error(`[Gofakeit Autofill] Error in ${method} request to ${url}:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Multi-function search HTTP request function\nasync function makeSearchRequest(method: 'GET' | 'POST', url: string, body: FuncSearchRequest[]): Promise<MultiFuncSearchApiResponse> {\n  try {\n    const options: {\n      method: string;\n      headers: Record<string, string>;\n      body: string;\n    } = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    };\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      return {\n        success: false,\n        error: `HTTP error! status: ${response.status}`,\n        status: response.status\n      };\n    }\n    \n    const data = await response.json();\n    return {\n      success: true,\n      data: data\n    };\n  } catch (error) {\n    console.error(`[Gofakeit Autofill] Error in ${method} request to ${url}:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n","import { callFunc } from './api';\nimport { handleError, getDefaultFunctionForInputType } from './autofill';\n\n// Get function name for date/time input (for batch processing)\nexport function getDateTimeInput(element: HTMLInputElement, gofakeitFunc: string): string {\n  const inputType = element.type.toLowerCase();\n  \n  // For all date/time inputs, use local generate functions when gofakeitFunc is 'true'\n  if (inputType === 'date') {\n    return gofakeitFunc === 'true' ? 'generateDate' : gofakeitFunc;\n  }\n  \n  if (inputType === 'datetime-local') {\n    return gofakeitFunc === 'true' ? 'generateDateTime' : gofakeitFunc;\n  }\n  \n  if (inputType === 'time') {\n    return gofakeitFunc === 'true' ? 'generateTime' : gofakeitFunc;\n  }\n  \n  if (inputType === 'month') {\n    return gofakeitFunc === 'true' ? 'generateMonth' : gofakeitFunc;\n  }\n  \n  if (inputType === 'week') {\n    return gofakeitFunc === 'true' ? 'generateWeek' : gofakeitFunc;\n  }\n  \n  return gofakeitFunc;\n}\n\n// Set date/time input value (for batch processing)\nexport function setDateTimeInput(element: HTMLInputElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Generate time string (HH:MM format)\nexport async function generateTime(): Promise<string> {\n  // Generate random hour and minute locally\n  const hour = Math.floor(Math.random() * 24).toString().padStart(2, '0');\n  const minute = Math.floor(Math.random() * 60).toString().padStart(2, '0');\n  return `${hour}:${minute}`;\n}\n\n// Generate month string (YYYY-MM format)\nexport async function generateMonth(): Promise<string> {\n  // Generate random year and month locally\n  const year = Math.floor(Math.random() * 30) + 1990; // Random year between 1990-2020\n  const month = (Math.floor(Math.random() * 12) + 1).toString().padStart(2, '0');\n  return `${year}-${month}`;\n}\n\n// Generate date string (YYYY-MM-DD format)\nexport async function generateDate(): Promise<string> {\n  // Generate random year, month, and day locally\n  const year = Math.floor(Math.random() * 30) + 1990; // Random year between 1990-2020\n  const month = (Math.floor(Math.random() * 12) + 1).toString().padStart(2, '0');\n  const day = (Math.floor(Math.random() * 28) + 1).toString().padStart(2, '0'); // Use 28 to avoid invalid dates\n  return `${year}-${month}-${day}`;\n}\n\n// Generate datetime string (YYYY-MM-DDTHH:MM format)\nexport async function generateDateTime(): Promise<string> {\n  // Generate random date and time locally\n  const year = Math.floor(Math.random() * 30) + 1990; // Random year between 1990-2020\n  const month = (Math.floor(Math.random() * 12) + 1).toString().padStart(2, '0');\n  const day = (Math.floor(Math.random() * 28) + 1).toString().padStart(2, '0'); // Use 28 to avoid invalid dates\n  const hour = Math.floor(Math.random() * 24).toString().padStart(2, '0');\n  const minute = Math.floor(Math.random() * 60).toString().padStart(2, '0');\n  return `${year}-${month}-${day}T${hour}:${minute}`;\n}\n\n// Generate week string (YYYY-W## format)\nexport async function generateWeek(): Promise<string> {\n  const weekYearResponse = await callFunc('year');\n  const weekResponse = await callFunc('number?min=1&max=53');\n  \n  if (!weekYearResponse.success || !weekResponse.success) {\n    throw new Error(`Failed to generate week: ${weekYearResponse.error || weekResponse.error}`);\n  }\n  \n  const week = weekResponse.data!.padStart(2, '0');\n  return `${weekYearResponse.data!}-W${week}`;\n}\n\n// Get ISO week number for a date\nfunction getISOWeek(date: Date): number {\n  const d = new Date(date.getTime());\n  d.setUTCHours(0, 0, 0, 0);\n  // Thursday in current week decides the year\n  d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));\n  // January 4 is always in week 1\n  const week1 = new Date(d.getUTCFullYear(), 0, 4);\n  // Adjust to Thursday in week 1 and count number of weeks from date to week1\n  const week = Math.ceil((((d.getTime() - week1.getTime()) / 86400000) - 3 + (week1.getUTCDay() || 7)) / 7);\n  return week;\n}\n\n// Handle date/time input elements\nexport async function handleDateTimeInput(element: HTMLInputElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string }> {\n  const inputType = element.type.toLowerCase();\n  const functionToCall = getDateTimeInput(element, gofakeitFunc);\n  \n  try {\n    let finalValue: string;\n    \n    // If value is provided (batch processing), use it directly\n    if (value !== undefined) {\n      finalValue = value;\n    } else {\n      // Handle generate functions (multi-function cases)\n      if (functionToCall === 'generateTime') {\n        finalValue = await generateTime();\n      } else if (functionToCall === 'generateMonth') {\n        finalValue = await generateMonth();\n      } else if (functionToCall === 'generateWeek') {\n        finalValue = await generateWeek();\n      } else if (functionToCall === 'generateDate') {\n        finalValue = await generateDate();\n      } else if (functionToCall === 'generateDateTime') {\n        finalValue = await generateDateTime();\n      } else {\n        // Handle single function cases\n        const response = await callFunc(functionToCall);\n        \n        if (!response.success) {\n          console.warn(`[Gofakeit Autofill] Error for ${inputType} input:`, response.error);\n          if (response.status === 400) {\n            handleError(element, `Failed to get random ${inputType}`);\n          }\n          \n          // Fallback to default function for this input type\n          const fallbackFunc = getDefaultFunctionForInputType(inputType);\n          if (fallbackFunc !== functionToCall) {\n            console.warn(`[Gofakeit Autofill] Falling back to default function: ${fallbackFunc}`);\n            \n            // Handle generate functions directly\n            if (fallbackFunc === 'generateWeek') {\n              finalValue = await generateWeek();\n            } else if (fallbackFunc === 'generateTime') {\n              finalValue = await generateTime();\n            } else if (fallbackFunc === 'generateMonth') {\n              finalValue = await generateMonth();\n            } else if (fallbackFunc === 'generateDate') {\n              finalValue = await generateDate();\n            } else if (fallbackFunc === 'generateDateTime') {\n              finalValue = await generateDateTime();\n            } else {\n              // For other functions, try calling the API\n              const fallbackResponse = await callFunc(fallbackFunc);\n              if (fallbackResponse.success) {\n                finalValue = fallbackResponse.data!;\n              } else {\n                return { success: false, usedFunc: functionToCall };\n              }\n            }\n          } else {\n            return { success: false, usedFunc: functionToCall };\n          }\n        } else {\n          finalValue = response.data!;\n        }\n      }\n    }\n    \n    // Parse and format the value based on input type\n    if (inputType === 'date') {\n      // Extract YYYY-MM-DD part from ISO date string\n      const dateMatch = finalValue.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n      if (dateMatch) {\n        finalValue = dateMatch[1];\n      } else {\n        console.warn('[Gofakeit Autofill] Could not parse date from response:', finalValue);\n        return { success: false, usedFunc: functionToCall };\n      }\n    } else if (inputType === 'datetime-local') {\n      // Extract YYYY-MM-DDTHH:MM part from ISO datetime string\n      const datetimeMatch = finalValue.match(/^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2})(:\\d{2})?/);\n      if (datetimeMatch) {\n        finalValue = datetimeMatch[1];\n      } else {\n        console.warn('[Gofakeit Autofill] Could not parse datetime from response:', finalValue);\n        return { success: false, usedFunc: functionToCall };\n      }\n    } else if (inputType === 'week' && functionToCall !== 'generateWeek') {\n      // Handle custom week functions (like date/daterange)\n      if (functionToCall === 'date' || functionToCall.startsWith('daterange')) {\n        const dateMatch = finalValue.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n        if (dateMatch) {\n          const date = new Date(dateMatch[1]);\n          const year = date.getFullYear();\n          const week = getISOWeek(date);\n          finalValue = `${year}-W${week.toString().padStart(2, '0')}`;\n        } else {\n          console.warn('[Gofakeit Autofill] Could not parse date for week from response:', finalValue);\n          return { success: false, usedFunc: functionToCall };\n        }\n      }\n    }\n    \n    setDateTimeInput(element, finalValue);\n    return { success: true, usedFunc: functionToCall };\n    \n  } catch (error) {\n    console.warn(`[Gofakeit Autofill] Unexpected error handling ${inputType} input:`, error);\n    return { success: false, usedFunc: functionToCall };\n  }\n}\n","import { callFunc } from './api';\nimport { handleError, getDefaultFunctionForInputType } from './autofill';\n\n// Get function name for text input (for batch processing)\nexport function getTextInput(element: HTMLInputElement, gofakeitFunc: string): string {\n  const inputType = element.type.toLowerCase();\n  \n  // Map input types to appropriate gofakeit functions if 'true' is passed\n  if (gofakeitFunc === 'true') {\n    switch (inputType) {\n      case 'email':\n        return 'email';\n      case 'tel':\n        return 'phone';\n      case 'password':\n        return 'password';\n      case 'search':\n        return 'word';\n      case 'url':\n        return 'url';\n      case 'color':\n        return 'hexcolor';\n      default:\n        return 'word'; // Default for text inputs\n    }\n  }\n  \n  return gofakeitFunc;\n}\n\n// Set text input value (for batch processing)\nexport function setTextInput(element: HTMLInputElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Handle text input elements (text, email, tel, password, search, url, color)\nexport async function handleTextInput(element: HTMLInputElement, gofakeitFunc: string): Promise<{ success: boolean, usedFunc: string }> {\n  const functionToCall = getTextInput(element, gofakeitFunc);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, '', functionToCall);\n    }\n    \n    // Fallback to default function for this input type\n    const inputType = element.type.toLowerCase();\n    const fallbackFunc = getDefaultFunctionForInputType(inputType);\n    if (fallbackFunc !== functionToCall) {\n      console.warn(`[Gofakeit Autofill] Falling back to default function: ${fallbackFunc}`);\n      const fallbackResponse = await callFunc(fallbackFunc);\n      if (fallbackResponse.success) {\n        setTextInput(element, fallbackResponse.data!);\n        return { success: true, usedFunc: fallbackFunc };\n      }\n    }\n    \n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setTextInput(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n\n// Get function name for textarea (for batch processing)\nexport function getTextarea(gofakeitFunc: string): string {\n  return gofakeitFunc === 'true' ? 'sentence' : gofakeitFunc;\n}\n\n// Set textarea value (for batch processing)\nexport function setTextarea(element: HTMLTextAreaElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Handle textarea elements\nexport async function handleTextarea(element: HTMLTextAreaElement, gofakeitFunc: string): Promise<{ success: boolean, usedFunc: string }> {\n  // Use sentence function if 'true' is passed, otherwise use the provided function\n  const functionToCall = getTextarea(gofakeitFunc);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, '', functionToCall);\n    }\n    \n    // Fallback to default function (sentence)\n    const fallbackFunc = 'sentence';\n    if (fallbackFunc !== functionToCall) {\n      console.warn(`[Gofakeit Autofill] Falling back to default function: ${fallbackFunc}`);\n      const fallbackResponse = await callFunc(fallbackFunc);\n      if (fallbackResponse.success) {\n        setTextarea(element, fallbackResponse.data!);\n        return { success: true, usedFunc: fallbackFunc };\n      }\n    }\n    \n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setTextarea(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n\n","import { callFunc } from './api';\nimport { handleError } from './autofill';\n\n// Handle checkbox input elements\nexport async function handleCheckbox(element: HTMLInputElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string }> {\n  // Find the checkbox group by name\n  const checkboxGroup = findCheckboxGroup(element);\n  \n  if (checkboxGroup.length === 0) {\n    console.warn('[Gofakeit Autofill] No checkbox group found for element:', element);\n    return { success: false, usedFunc: 'bool' };\n  }\n  \n  // Use boolean function if 'true' is passed, otherwise use the provided function\n  const functionToCall = gofakeitFunc === 'true' ? 'bool' : gofakeitFunc;\n  \n  // If value is provided (from batch), use it directly\n  if (value !== undefined) {\n    // Clear all checkboxes first\n    checkboxGroup.forEach(cb => {\n      cb.checked = false;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // For boolean values, check if it's true\n    const boolValue = String(value).toLowerCase() === 'true' || value === '1' || String(value).toLowerCase() === 'yes';\n    if (boolValue && checkboxGroup.length > 0) {\n      // Select the first checkbox if value is true\n      checkboxGroup[0].checked = true;\n      checkboxGroup[0].dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    return { success: true, usedFunc: functionToCall };\n  }\n  \n  // For checkbox groups, we want to select multiple checkboxes\n  if (gofakeitFunc === 'true') {\n    // Select roughly half of the checkboxes in the group\n    const numToSelect = Math.max(1, Math.ceil(checkboxGroup.length / 2));\n    \n    // Clear all checkboxes first\n    checkboxGroup.forEach(cb => {\n      cb.checked = false;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Select random checkboxes using API\n    const selectedIndices = new Set<number>();\n    for (let i = 0; i < numToSelect; i++) {\n      const boolResponse = await callFunc('bool');\n      if (boolResponse.success) {\n        const shouldSelect = boolResponse.data!.toLowerCase() === 'true' || boolResponse.data!.toLowerCase() === '1';\n        if (shouldSelect) {\n          // Find an unselected checkbox\n          const availableIndices = Array.from({ length: checkboxGroup.length }, (_, i) => i)\n            .filter(i => !selectedIndices.has(i));\n          \n          if (availableIndices.length > 0) {\n            const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\n            selectedIndices.add(randomIndex);\n            checkboxGroup[randomIndex].checked = true;\n            checkboxGroup[randomIndex].dispatchEvent(new Event('change', { bubbles: true }));\n          }\n        }\n      }\n    }\n  } else {\n    // For custom functions, use the response to determine which checkboxes to select\n    const response = await callFunc(functionToCall);\n    \n    if (!response.success) {\n      console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n      \n      if (response.status === 400) {\n        handleError(element, '', functionToCall);\n      }\n      return { success: false, usedFunc: functionToCall };\n    }\n    \n    // Clear all checkboxes first\n    checkboxGroup.forEach(cb => {\n      cb.checked = false;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Parse the response to determine which checkboxes to select\n    const values = response.data!.split(',').map(v => v.trim());\n    \n    checkboxGroup.forEach((cb, index) => {\n      const shouldCheck = values.includes(cb.value) || values.includes(index.toString());\n      cb.checked = shouldCheck;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n  }\n  \n  return { success: true, usedFunc: functionToCall };\n}\n\n// Handle radio inputs\nexport async function handleRadio(element: HTMLInputElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string, selectedElement?: HTMLInputElement }> {\n  const radioGroup = findRadioGroup(element);\n  // For radio buttons, when 'true' is passed, we actually use 'bool' function\n  const functionToCall = gofakeitFunc === 'true' ? 'bool' : gofakeitFunc;\n  \n  // If a specific value is provided, try to select that radio button\n  if (value !== undefined) {\n    // Clear all radio buttons first\n    radioGroup.forEach((rb: HTMLInputElement) => {\n      rb.checked = false;\n      rb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Try to find by value first, then by index\n    let selectedRadio = radioGroup.find((rb: HTMLInputElement) => rb.value === value);\n    if (!selectedRadio && !isNaN(Number(value))) {\n      const index = parseInt(value);\n      if (index >= 0 && index < radioGroup.length) {\n        selectedRadio = radioGroup[index];\n      }\n    }\n    \n    // If no match found, select the first one\n    if (selectedRadio) {\n      selectedRadio.checked = true;\n      selectedRadio.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    return { success: true, usedFunc: functionToCall, selectedElement: selectedRadio };\n  }\n  \n  // For radio groups, we want to select exactly one radio button\n  if (gofakeitFunc === 'true') {\n    // Clear all radio buttons first\n    radioGroup.forEach((rb: HTMLInputElement) => {\n      rb.checked = false;\n      rb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Always select exactly one random radio button\n    const randomIndex = Math.floor(Math.random() * radioGroup.length);\n    radioGroup[randomIndex].checked = true;\n    radioGroup[randomIndex].dispatchEvent(new Event('change', { bubbles: true }));\n    \n    return { success: true, usedFunc: functionToCall, selectedElement: radioGroup[randomIndex] };\n  } else {\n    // For custom functions, use the response to determine which radio button to select\n    const response = await callFunc(functionToCall);\n    \n    if (!response.success) {\n      console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n      \n      if (response.status === 400) {\n        handleError(element, '', functionToCall);\n      }\n      return { success: false, usedFunc: functionToCall };\n    }\n    \n    // Clear all radio buttons first\n    radioGroup.forEach((rb: HTMLInputElement) => {\n      rb.checked = false;\n      rb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Parse the response to determine which radio button to select\n    const value = response.data!.trim();\n    \n    // Try to find by value first, then by index\n    let selectedRadio = radioGroup.find((rb: HTMLInputElement) => rb.value === value);\n    if (!selectedRadio && !isNaN(Number(value))) {\n      const index = parseInt(value);\n      if (index >= 0 && index < radioGroup.length) {\n        selectedRadio = radioGroup[index];\n      }\n    }\n    \n    // If no match found, select a random one to ensure exactly one is selected\n    if (selectedRadio) {\n      selectedRadio.checked = true;\n      selectedRadio.dispatchEvent(new Event('change', { bubbles: true }));\n      \n      return { success: true, usedFunc: functionToCall, selectedElement: selectedRadio };\n    } else {\n      // Fallback: select a random radio button\n      const randomIndex = Math.floor(Math.random() * radioGroup.length);\n      radioGroup[randomIndex].checked = true;\n      radioGroup[randomIndex].dispatchEvent(new Event('change', { bubbles: true }));\n      \n      return { success: true, usedFunc: functionToCall, selectedElement: radioGroup[randomIndex] };\n    }\n  }\n}\n\n// Helper function to find checkbox group\nfunction findCheckboxGroup(element: HTMLInputElement): HTMLInputElement[] {\n  if (element.type !== 'checkbox') return [element];\n  \n  // Look for checkboxes with the same name or in the same container\n  const name = element.name;\n  const container = element.closest('form, div, fieldset') || document;\n  \n  if (name) {\n    // Find checkboxes with the same name\n    return Array.from(container.querySelectorAll(`input[type=\"checkbox\"][name=\"${name}\"]`));\n  } else {\n    // Find checkboxes in the same container\n    return Array.from(container.querySelectorAll('input[type=\"checkbox\"]'));\n  }\n}\n\n// Helper function to find radio group\nfunction findRadioGroup(element: HTMLInputElement): HTMLInputElement[] {\n  if (element.type !== 'radio') return [element];\n  \n  // Look for radio buttons with the same name\n  const name = element.name;\n  \n  if (name) {\n    // Search the entire document for radio buttons with the same name\n    const radioButtons = Array.from(document.querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)) as HTMLInputElement[];\n    return radioButtons;\n  } else {\n    // Find radio buttons in the same container\n    const container = element.closest('form, div, fieldset') || document;\n    const radioButtons = Array.from(container.querySelectorAll('input[type=\"radio\"]')) as HTMLInputElement[];\n    return radioButtons;\n  }\n}\n\n// Handle select dropdown\nexport async function handleSelectWithFunction(element: HTMLSelectElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string }> {\n  const options = Array.from(element.options).map(option => option.value).filter(value => value !== '');\n  \n  if (options.length === 0) {\n    console.warn('[Gofakeit Autofill] Select element has no valid options:', element);\n    return { success: false, usedFunc: gofakeitFunc };\n  }\n  \n  // If value is provided (from batch), use it directly\n  if (value !== undefined) {\n    if (element.multiple) {\n      // Handle multiselect\n      Array.from(element.options).forEach(option => option.selected = false);\n      \n      // Parse comma-separated values\n      const selectedValues = value.split(',').map(val => val.trim()).filter(val => val !== '');\n      selectedValues.forEach(value => {\n        const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n        if (option) option.selected = true;\n      });\n    } else {\n      // Try to set the value directly\n      const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n      if (option) {\n        element.value = value;\n      } else {\n        // If the value doesn't match any option, select a random option\n        const validOptions = options.filter(opt => opt !== '');\n        if (validOptions.length > 0) {\n          const randomOption = validOptions[Math.floor(Math.random() * validOptions.length)];\n          element.value = randomOption;\n        } else {\n          // If no valid options, don't set any value\n          return { success: false, usedFunc: gofakeitFunc };\n        }\n      }\n    }\n    \n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    return { success: true, usedFunc: gofakeitFunc === 'true' ? 'random' : gofakeitFunc };\n  }\n  \n  let response;\n  if (gofakeitFunc === 'true') {\n    // Use random selection for 'true' - randomly select from options\n    const randomIndex = Math.floor(Math.random() * options.length);\n    const selectedOption = options[randomIndex];\n    response = { success: true, data: selectedOption };\n  } else {\n    // Use custom function\n    response = await callFunc(gofakeitFunc);\n  }\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for select:`, response.error);\n    if (response.status === 400) {\n      handleError(element, 'Failed to get selection');\n    }\n    return { success: false, usedFunc: gofakeitFunc };\n  }\n  \n  if (element.multiple) {\n    // Handle multiselect\n    Array.from(element.options).forEach(option => option.selected = false);\n    \n    if (gofakeitFunc === 'true') {\n      // For random selection, select multiple options (roughly half)\n      const numToSelect = Math.min(Math.ceil(options.length / 2), options.length);\n      const selectedValues = [response.data!];\n      \n      // Add more random selections\n      const remainingOptions = options.filter(opt => opt !== response.data!);\n      for (let i = 1; i < numToSelect && remainingOptions.length > 0; i++) {\n        const randomIndex = Math.floor(Math.random() * remainingOptions.length);\n        selectedValues.push(remainingOptions.splice(randomIndex, 1)[0]);\n      }\n      \n      selectedValues.forEach(value => {\n        const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n        if (option) option.selected = true;\n      });\n    } else {\n      // Parse comma-separated values for custom function\n      const selectedValues = response.data!.split(',').map(val => val.trim()).filter(val => val !== '');\n      selectedValues.forEach(value => {\n        const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n        if (option) option.selected = true;\n      });\n    }\n  } else {\n    element.value = response.data!;\n  }\n  \n  element.dispatchEvent(new Event('change', { bubbles: true }));\n  return { success: true, usedFunc: gofakeitFunc === 'true' ? 'random' : gofakeitFunc };\n}\n","import { callFunc } from './api';\nimport { handleError } from './autofill';\n\n// Get function name for number input (for batch processing)\nexport function getNumberInput(gofakeitFunc: string): string {\n  return gofakeitFunc === 'true' ? 'number' : gofakeitFunc;\n}\n\n// Set number input value (for batch processing)\nexport function setNumberInput(element: HTMLInputElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Handle number input elements\nexport async function handleNumberInput(element: HTMLInputElement, gofakeitFunc: string): Promise<{ success: boolean, usedFunc: string }> {\n  // Use number function if 'true' is passed, otherwise use the provided function\n  const functionToCall = getNumberInput(gofakeitFunc);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, '', functionToCall);\n    }\n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setNumberInput(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n\n// Get function name for range input (for batch processing)\nexport function getRangeInput(element: HTMLInputElement): string {\n  const min = parseFloat(element.min) || 0;\n  const max = parseFloat(element.max) || 100;\n  return `number?min=${min}&max=${max}`;\n}\n\n// Set range input value (for batch processing)\nexport function setRangeInput(element: HTMLInputElement, value: string): void {\n  const numValue = parseFloat(value);\n  if (!isNaN(numValue)) {\n    const min = parseFloat(element.min) || 0;\n    const max = parseFloat(element.max) || 100;\n    const clampedValue = Math.max(min, Math.min(max, numValue));\n    element.value = clampedValue.toString();\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n  }\n}\n\n// Handle range input elements\nexport async function handleRangeInput(element: HTMLInputElement): Promise<{ success: boolean, usedFunc: string }> {\n  // For range inputs, always use gofakeit API with min/max from the element\n  const functionToCall = getRangeInput(element);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for range input:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, 'Failed to get random number for range');\n    }\n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setRangeInput(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n","import { GOFAKEIT_COLORS } from './styles';\nimport { handleDateTimeInput } from './input-datetime';\nimport { handleTextInput, handleTextarea, getTextarea, setTextInput, setTextarea } from './input-text';\nimport { handleCheckbox, handleRadio, handleSelectWithFunction } from './input-misc';\nimport { handleNumberInput, handleRangeInput, getRangeInput, setNumberInput, setRangeInput } from './input-number';\nimport { callMultiFunc, MultiFuncRequest, searchMultiFunc, FuncSearchRequest } from './api';\n\nexport interface AutofillSettings {\n  smart?: boolean;\n  staggered?: boolean;\n  staggerDelay?: number;\n}\n\n// ============================================================================\n// MAIN PUBLIC FUNCTIONS (Entry Points)\n// ============================================================================\n\n// Unified autofill function that handles all cases\nexport async function autofill(target?: HTMLElement | Element | string, settings?: AutofillSettings): Promise<boolean | void> {\n  const defaultSettings: AutofillSettings = { smart: true }; // Default to true for backward compatibility\n  const finalSettings = { ...defaultSettings, ...settings };\n  \n  // No parameters - autofill all form fields on the page\n  if (!target) {\n    return autofillAll(finalSettings);\n  }\n\n  // If target is a string, treat it as a CSS selector (ID, class, or other selector)\n  if (typeof target === 'string') {\n    const element = document.querySelector(target) as HTMLElement;\n    if (element) {\n      console.log(`[Gofakeit] Found element with selector \"${target}\":`, element);\n      target = element;\n    } else {\n      console.warn(`[Gofakeit] No element found with selector: \"${target}\"`);\n      showNotification(`No element found with selector: ${target}`, 'error');\n      return false;\n    }\n  }\n  \n  // If target is a container (has form fields), autofill the container\n  if (target instanceof HTMLElement && hasFormFields(target)) {\n    return autofillContainer(target, finalSettings);\n  }\n  \n  // If target is a form element, autofill just that element\n  if (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement) {\n    const success = await autofillElement(target, finalSettings);\n    if (!success) {\n      showNotification('Failed to autofill the specified element', 'error');\n    }\n    return success;\n  }\n  \n  // If target is a container but doesn't have form fields, try to find a container\n  if (target instanceof HTMLElement) {\n    const container = findFormContainer(target);\n    if (container) {\n      return autofillContainer(container, finalSettings);\n    }\n  }\n  \n  // For non-form elements, return false instead of falling back to autofill all\n  return false;\n}\n\n// Autofill all form fields on the page\nasync function autofillAll(settings: AutofillSettings): Promise<void> {\n  const elements = queryFormElements();\n  const smartMode = settings.smart ?? true;\n\n  // Smart mode: Fill ALL form fields (except those explicitly excluded)\n  // Manual mode: Only fill fields with data-gofakeit attributes\n  const targetsBase = smartMode\n    ? elements\n    : elements.filter((el) => (el as Element).hasAttribute('data-gofakeit'));\n  const targets = targetsBase.filter((el) => !isDataGofakeitFalse(el));\n\n  if (targets.length === 0) {\n    if (!smartMode) {\n      showNotification('No data-gofakeit fields exist. Turn on Smart mode to fill all form fields.', 'info');\n    } else {\n      showNotification('No form fields found to autofill', 'info');\n    }\n    return;\n  }\n\n  console.log(`[Gofakeit] Found ${targets.length} elements to generate data for`);\n  showNotification(`Starting data generation for ${targets.length} fields...`, 'info');\n\n  const results = await processElements(targets, settings);\n  showResults(results.success, results.failed, 'Autofill');\n}\n\n// Autofill all fields within a specific container\nasync function autofillContainer(container: HTMLElement, settings: AutofillSettings): Promise<void> {\n  const elements = queryFormElements(container);\n  const smartMode = settings.smart ?? true;\n\n  // Smart mode: Fill ALL form fields in container (except those explicitly excluded)\n  // Manual mode: Only fill fields with data-gofakeit attributes\n  const targetsBase = smartMode\n    ? elements\n    : elements.filter((el) => (el as Element).hasAttribute('data-gofakeit'));\n  const targets = targetsBase.filter((el) => !isDataGofakeitFalse(el));\n\n  if (targets.length === 0) {\n    if (!smartMode) {\n      showNotification('No data-gofakeit fields exist in this section. Turn on Smart mode to fill all form fields.', 'info');\n    } else {\n      showNotification('No form fields found in this container', 'info');\n    }\n    return;\n  }\n  \n  console.log(`[Gofakeit] Found ${targets.length} elements to generate data for in container`);\n  showNotification(`Starting data generation for ${targets.length} fields...`, 'info');\n  \n  const results = await processElements(targets, settings);\n  showResults(results.success, results.failed, 'Container autofill');\n}\n\n// Main autofill function that routes to specific handlers\nasync function autofillElement(element: Element, settings: AutofillSettings): Promise<boolean> {\n  const gofakeitFunc = element.getAttribute('data-gofakeit');\n  if (typeof gofakeitFunc === 'string' && gofakeitFunc.trim().toLowerCase() === 'false') {\n    return false;\n  }\n  \n  const smartMode = settings.smart ?? true;\n  // Smart mode: Fill any form field (even without data-gofakeit attribute)\n  // Manual mode: Only fill fields that have data-gofakeit attributes\n  if (!gofakeitFunc && !smartMode) {\n    return false;\n  }\n\n  try {\n    // Handle select dropdowns\n    if (element instanceof HTMLSelectElement) {\n      const funcToUse = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n      const { success, usedFunc } = await handleSelectWithFunction(element, funcToUse);\n      if (success) {\n        showBadgeWithTiming(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    // Handle textarea elements\n    if (element instanceof HTMLTextAreaElement) {\n      const funcToUse = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'sentence';\n      const { success, usedFunc } = await handleTextarea(element, funcToUse);\n      if (success) {\n        showBadgeWithTiming(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    // Handle input elements\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      // Handle checkbox inputs\n      if (inputType === 'checkbox') {\n        const passToHandler = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n        const { success, usedFunc } = await handleCheckbox(element, passToHandler);\n        if (success) {\n          showBadgeWithTiming(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle radio inputs\n      if (inputType === 'radio') {\n        const passToHandler = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n        const { success, usedFunc, selectedElement } = await handleRadio(element, passToHandler);\n        if (success) {\n          // Show function badge over the selected radio button, not the original one\n          const elementToShowBadge = selectedElement || element;\n          showBadgeWithTiming(elementToShowBadge, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle range inputs\n      if (inputType === 'range') {\n        const { success, usedFunc } = await handleRangeInput(element);\n        if (success) {\n          showBadgeWithTiming(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle all other input types (text, email, tel, password, search, url, color, number, date, etc.)\n      const inferred = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : await searchFunctionForInput(element);\n      \n      // Route to appropriate handler based on input type\n      if (inputType === 'number') {\n        const { success, usedFunc } = await handleNumberInput(element, inferred);\n        if (success) {\n          showBadgeWithTiming(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      if (inputType === 'date' || inputType === 'time' || inputType === 'datetime-local' || \n          inputType === 'month' || inputType === 'week') {\n        const { success, usedFunc } = await handleDateTimeInput(element, inferred);\n        if (success) {\n          showBadgeWithTiming(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle text inputs (text, email, tel, password, search, url, color, etc.)\n      const { success, usedFunc } = await handleTextInput(element, inferred);\n      if (success) {\n        showBadgeWithTiming(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    console.warn('[Gofakeit] Unsupported element type:', element);\n    return false;\n    \n  } catch (error) {\n    console.error('[Gofakeit] Unexpected error generating data for element:', element, error);\n    return false;\n  }\n}\n\n// ============================================================================\n// PROCESSING FUNCTIONS (Called by main functions)\n// ============================================================================\n\n// Query all form elements that can be autofilled\nfunction queryFormElements(container?: HTMLElement): Element[] {\n  const selector = 'input, textarea, select';\n  const nodeList = container ? container.querySelectorAll(selector) : document.querySelectorAll(selector);\n  const elements: Element[] = [];\n  nodeList.forEach((el) => {\n    if (el instanceof HTMLInputElement) {\n      if (el.type === 'hidden' || el.disabled || el.readOnly) return;\n      elements.push(el);\n    } else if (el instanceof HTMLTextAreaElement) {\n      if (el.disabled || el.readOnly) return;\n      elements.push(el);\n    } else if (el instanceof HTMLSelectElement) {\n      if (el.disabled) return;\n      elements.push(el);\n    }\n  });\n  return elements;\n}\n\nfunction isDataGofakeitFalse(el: Element): boolean {\n  const val = (el as Element).getAttribute && (el as Element).getAttribute('data-gofakeit');\n  return typeof val === 'string' && val.trim().toLowerCase() === 'false';\n}\n\n// Get unique elements, handling checkbox and radio groups\nfunction getUniqueElements(elements: Element[]): Element[] {\n  const uniqueElements: Element[] = [];\n  const processedGroups = new Set<string>();\n  \n  for (const element of elements) {\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      if (inputType === 'checkbox' || inputType === 'radio') {\n        const name = element.name;\n        if (name && processedGroups.has(name)) {\n          // Skip if we've already processed this group\n          continue;\n        }\n        if (name) {\n          processedGroups.add(name);\n        }\n      }\n    }\n    \n    uniqueElements.push(element);\n  }\n  \n  return uniqueElements;\n}\n\n// Process multiple elements and track results using batched API calls\nasync function processElements(elements: Element[], settings: AutofillSettings): Promise<{ success: number, failed: number }> {\n  let successfulCount = 0;\n  let failedCount = 0;\n  \n  // Get unique elements to avoid processing checkbox/radio groups multiple times\n  const uniqueElements = getUniqueElements(elements);\n\n  // Separate input elements from other elements\n  const searchInputElements: HTMLInputElement[] = [];\n  const otherElements: Element[] = [];\n  \n  for (const element of uniqueElements) {\n    const gofakeitFunc = element.getAttribute('data-gofakeit');\n    \n    // Check if element has a specific function value (not \"true\" or \"false\")\n    const hasSpecificFunction = gofakeitFunc && \n      gofakeitFunc.trim().toLowerCase() !== 'true' && \n      gofakeitFunc.trim().toLowerCase() !== 'false';\n    \n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      if (needsSearchApi(inputType) && !hasSpecificFunction) {\n        // Only use search API for elements that need it and don't have specific functions\n        searchInputElements.push(element);\n      } else {\n        // For excluded input types or elements with specific functions, add them to otherElements\n        otherElements.push(element);\n      }\n    } else {\n      otherElements.push(element);\n    }\n  }\n\n  // Use search API to get functions for all searchable input elements at once\n  let inputFunctionMap = new Map<HTMLInputElement, string>();\n  if (searchInputElements.length > 0) {\n    try {\n      inputFunctionMap = await searchFunctionsForInputs(searchInputElements);\n    } catch (error) {\n      console.warn('[Gofakeit Autofill] Search API failed, falling back to individual function detection:', error);\n      // Fallback to individual function detection\n      for (const element of searchInputElements) {\n        const func = await getElementFunction(element, settings);\n        if (func) {\n          inputFunctionMap.set(element, func);\n        }\n      }\n    }\n  }\n\n  // Process excluded elements individually (they don't use batch API)\n  const excludedElements: Element[] = [];\n  const batchElements: { element: Element, func: string }[] = [];\n  \n  // Add input elements with their search API functions to batch\n  searchInputElements.forEach(element => {\n    const func = inputFunctionMap.get(element);\n    if (func) {\n      batchElements.push({ element, func });\n    }\n  });\n  \n  // Process other elements (select, textarea, checkbox, radio, etc.)\n  for (const element of otherElements) {\n    try {\n      const func = await getElementFunction(element, settings);\n      if (func) {\n        // Check if this is an excluded type that should be processed individually\n        if (element instanceof HTMLInputElement) {\n          const inputType = element.type.toLowerCase();\n          if (['checkbox', 'radio', 'range', 'file', 'button', 'submit', 'reset', 'image', 'color', 'date', 'time', 'datetime-local', 'month', 'week'].includes(inputType)) {\n            // Process excluded types individually\n            excludedElements.push(element);\n            continue;\n          }\n        }\n        // Add to batch for other types (select, textarea, etc.)\n        batchElements.push({ element, func });\n      }\n    } catch (error) {\n      failedCount++;\n      console.warn(`[Gofakeit Autofill] Failed to get function for element:`, element, error);\n    }\n  }\n\n  // Process excluded elements with appropriate timing\n  const testMode = (globalThis as any).__GOFAKEIT_TEST_MODE__;\n  const staggered = testMode ? false : (settings.staggered ?? true);\n  \n  if (staggered) {\n    // Process excluded elements individually with staggered timing\n    for (let i = 0; i < excludedElements.length; i++) {\n      const element = excludedElements[i];\n      const staggerDelay = settings.staggerDelay ?? 50;\n      \n      if (i > 0) {\n        await new Promise(resolve => setTimeout(resolve, staggerDelay));\n      }\n      \n      try {\n        const success = await autofillElement(element, settings);\n        if (success) {\n          successfulCount++;\n        } else {\n          failedCount++;\n        }\n      } catch (error) {\n        failedCount++;\n        console.warn(`[Gofakeit Autofill] Failed to process excluded element:`, element, error);\n      }\n    }\n  } else {\n    // Process excluded elements all at once for fast mode\n    const promises = excludedElements.map(async (element) => {\n      try {\n        const success = await autofillElement(element, settings);\n        return success;\n      } catch (error) {\n        console.warn(`[Gofakeit Autofill] Failed to process excluded element:`, element, error);\n        return false;\n      }\n    });\n    \n    const results = await Promise.all(promises);\n    results.forEach(success => {\n      if (success) {\n        successfulCount++;\n      } else {\n        failedCount++;\n      }\n    });\n  }\n\n  // Process batch elements if any exist\n  if (batchElements.length === 0) {\n    return { success: successfulCount, failed: failedCount };\n  }\n\n  // Create batch requests\n  const requests: MultiFuncRequest[] = batchElements.map((item, index) => ({\n    id: `req_${index}`,\n    func: item.func\n  }));\n\n  // Make single batch API call\n  const batchResponse = await callMultiFunc(requests);\n  \n  if (!batchResponse.success || !batchResponse.data) {\n    console.error('[Gofakeit Autofill] Batch API call failed:', batchResponse.error);\n    return { success: successfulCount, failed: failedCount + batchElements.length };\n  }\n\n  // Process responses using existing handlers with staggered timing\n  for (let i = 0; i < batchElements.length; i++) {\n    const { element, func } = batchElements[i];\n    const response = batchResponse.data[i];\n    \n    // Add staggered delay for visual effect if enabled\n    const testMode = (globalThis as any).__GOFAKEIT_TEST_MODE__;\n    const staggered = testMode ? false : (settings.staggered ?? true);\n    const staggerDelay = settings.staggerDelay ?? 50;\n    if (staggered && i > 0) {\n      await new Promise(resolve => setTimeout(resolve, staggerDelay));\n    }\n    \n    if (response && response.error) {\n      // Handle API errors - display error message above the field\n      failedCount++;\n      console.warn(`[Gofakeit Autofill] API error for element:`, element, response.error);\n      showFunctionBadge(element, response.error, 'error');\n    } else if (response && response.value !== null) {\n      try {\n        // Use the existing autofillElement function with the batch response value\n        const success = await autofillElementWithValue(element, func, response.value, settings);\n        if (success) {\n          successfulCount++;\n          \n          // Monitor if the value gets cleared after a short delay\n          setTimeout(() => {\n            if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n              if (element.value === '') {\n                console.warn('[Gofakeit Autofill] Value was cleared for element:', element);\n              }\n            } else if (element instanceof HTMLSelectElement) {\n              if (element.value === '') {\n                console.warn('[Gofakeit Autofill] Value was cleared for select:', element);\n              }\n            }\n          }, 1000);\n        } else {\n          failedCount++;\n        }\n      } catch (error) {\n        failedCount++;\n        console.warn(`[Gofakeit Autofill] Failed to apply value to element:`, element, error);\n      }\n    } else {\n      failedCount++;\n      console.warn(`[Gofakeit Autofill] No valid response for element:`, element);\n    }\n  }\n\n  return { success: successfulCount, failed: failedCount };\n}\n\n// Get the function name for an element (same logic as autofillElement but returns function name)\nasync function getElementFunction(element: Element, settings: AutofillSettings): Promise<string | null> {\n  const gofakeitFunc = element.getAttribute('data-gofakeit');\n  if (typeof gofakeitFunc === 'string' && gofakeitFunc.trim().toLowerCase() === 'false') {\n    return null;\n  }\n  \n  const smartMode = settings.smart ?? true;\n  if (!gofakeitFunc && !smartMode) {\n    return null;\n  }\n\n  try {\n    // Handle select dropdowns\n    if (element instanceof HTMLSelectElement) {\n      return (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'word';\n    }\n    \n    // Handle textarea elements\n    if (element instanceof HTMLTextAreaElement) {\n      return getTextarea(gofakeitFunc || 'true');\n    }\n    \n    // Handle input elements\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      // Handle checkbox inputs\n      if (inputType === 'checkbox') {\n        return (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'bool';\n      }\n      \n      // Handle radio inputs\n      if (inputType === 'radio') {\n        return (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n      }\n      \n      // Handle range inputs\n      if (inputType === 'range') {\n        return getRangeInput(element);\n      }\n      \n      // For text inputs with specific functions, return the function directly\n      if (gofakeitFunc && gofakeitFunc !== 'true') {\n        return gofakeitFunc;\n      }\n      \n      // For all other input types, use search API (this is a fallback for individual elements)\n      return await searchFunctionForInput(element);\n    }\n    \n    console.warn('[Gofakeit] Unsupported element type for batching:', element);\n    return null;\n    \n  } catch (error) {\n    console.error('[Gofakeit] Unexpected error getting function for element:', element, error);\n    return null;\n  }\n}\n\n\n// Autofill an element with a pre-fetched value (for batch processing)\nasync function autofillElementWithValue(element: Element, func: string, value: string, settings?: AutofillSettings): Promise<boolean> {\n  try {\n    // Handle select dropdowns\n    if (element instanceof HTMLSelectElement) {\n      const { success, usedFunc } = await handleSelectWithFunction(element, func, value);\n      if (success) {\n        showBadgeWithTiming(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    // Handle textarea elements\n    if (element instanceof HTMLTextAreaElement) {\n      setTextarea(element, value);\n      showBadgeWithTiming(element, func, settings);\n      return true;\n    }\n    \n    // Handle input elements\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      // Handle checkbox inputs\n      if (inputType === 'checkbox') {\n        const { success, usedFunc } = await handleCheckbox(element, func, value);\n        if (success) {\n          showBadgeWithTiming(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle radio inputs\n      if (inputType === 'radio') {\n        const { success, usedFunc } = await handleRadio(element, func, value);\n        if (success) {\n          showBadgeWithTiming(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle number inputs\n      if (inputType === 'number') {\n        setNumberInput(element, value);\n        showBadgeWithTiming(element, func, settings);\n        return true;\n      }\n      \n      // Handle range inputs\n      if (inputType === 'range') {\n        setRangeInput(element, value);\n        showBadgeWithTiming(element, func, settings);\n        return true;\n      }\n      \n      // Handle date/time inputs\n      if (inputType === 'date' || inputType === 'time' || inputType === 'datetime-local' || \n          inputType === 'month' || inputType === 'week') {\n        const { success, usedFunc } = await handleDateTimeInput(element, func, value);\n        if (success) {\n          showBadgeWithTiming(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle text inputs (text, email, tel, password, search, url, color, etc.)\n      setTextInput(element, value);\n      showBadgeWithTiming(element, func, settings);\n      return true;\n    }\n    \n    console.warn('[Gofakeit] Unsupported element type:', element);\n    return false;\n    \n  } catch (error) {\n    console.error('[Gofakeit] Unexpected error generating data for element:', element, error);\n    return false;\n  }\n}\n\n// Show results notification\nfunction showResults(successfulCount: number, failedCount: number, context: string): void {\n  // Show successful count notification\n  if (successfulCount > 0) {\n    console.log(`[Gofakeit] ${context} completed successfully for ${successfulCount} fields`);\n    showNotification(`Successfully generated data for ${successfulCount} fields!`, 'success');\n  }\n  \n  // Show failed count notification\n  if (failedCount > 0) {\n    console.error(`[Gofakeit] ${context} failed for ${failedCount} fields`);\n    showNotification(`Failed to generate data for ${failedCount} fields.`, 'error');\n  }\n  \n  // If no fields were processed at all\n  if (successfulCount === 0 && failedCount === 0) {\n    console.log(`[Gofakeit] ${context} - no fields were processed`);\n    showNotification(`No fields were processed.`, 'info');\n  }\n}\n\n// ============================================================================\n// UTILITY FUNCTIONS (Called by various functions)\n// ============================================================================\n\n// Show function badge with staggered timing\nfunction showBadgeWithTiming(element: Element, func: string, settings?: AutofillSettings): void {\n  const testMode = (globalThis as any).__GOFAKEIT_TEST_MODE__;\n  const staggered = testMode ? false : (settings?.staggered ?? true);\n  const staggerDelay = settings?.staggerDelay ?? 50;\n  \n  // Only delay the badge if staggered is enabled, using the staggerDelay from settings\n  const actualDelay = staggered ? staggerDelay : 0;\n  setTimeout(() => {\n    showFunctionBadge(element, func);\n  }, actualDelay);\n}\n\n// Handle error display and field highlighting\nexport function handleError(element: Element, error: string, functionName?: string): void {\n  if (element instanceof HTMLElement) {\n    element.style.border = `2px solid #dc3545`;\n    \n    setTimeout(() => {\n      element.style.border = '';\n    }, 5000);\n  }\n  \n  const message = functionName ? `Invalid function: ${functionName}` : error;\n  showFunctionBadge(element, message, 'error');\n}\n\n// Check if an element contains form fields\nexport function hasFormFields(element: HTMLElement): boolean {\n  const formFields = element.querySelectorAll('input, textarea, select');\n  return formFields.length > 0;\n}\n\n// Check if an element is a form field with data-gofakeit attribute\nexport function isFormField(element: HTMLElement): boolean {\n  return (\n    (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA' || element.tagName === 'SELECT') &&\n    element.hasAttribute('data-gofakeit')\n  );\n}\n\n// Extract nearby/associated label text for context\nfunction getAssociatedLabelText(input: HTMLInputElement): string {\n  const texts: string[] = [];\n  const id = input.id;\n  // aria-labelledby\n  const labelledBy = input.getAttribute('aria-labelledby');\n  if (labelledBy) {\n    labelledBy.split(/\\s+/).forEach((ref) => {\n      const el = document.getElementById(ref);\n      if (el && el.textContent) texts.push(el.textContent);\n    });\n  }\n  // explicit label[for]\n  if (id) {\n    try {\n      const lbl = document.querySelector('label[for=\"' + id.replace(/\"/g, '\\\\\"') + '\"]') as HTMLLabelElement | null;\n      if (lbl && lbl.textContent) texts.push(lbl.textContent);\n    } catch { /* ignore */ }\n  }\n  // implicit parent label\n  const closestLabel = input.closest('label');\n  if (closestLabel && closestLabel.textContent) texts.push(closestLabel.textContent);\n  // previous sibling label (common in some UIs)\n  const prev = input.previousElementSibling as HTMLElement | null;\n  if (prev && prev.tagName === 'LABEL' && prev.textContent) texts.push(prev.textContent);\n  return texts.join(' ').toLowerCase();\n}\n\n// Determine if an input type needs search API for function detection\nfunction needsSearchApi(inputType: string): boolean {\n  // These input types have their own specific handling and don't need search API\n  const skipSearchTypes = ['checkbox', 'radio', 'select', 'range', 'file', 'button', 'submit', 'reset', 'image', 'color', 'week', 'date', 'time', 'datetime-local', 'month'];\n  return !skipSearchTypes.includes(inputType);\n}\n\n// Get a default function for input types that don't need search API\nexport function getDefaultFunctionForInputType(inputType: string): string {\n  switch (inputType) {\n    case 'checkbox':\n    case 'radio':\n    case 'select':\n      return 'true';\n    case 'range':\n      return 'number?min=0&max=100';\n    case 'file':\n      return 'word';\n    case 'button':\n    case 'submit':\n    case 'reset':\n    case 'image':\n      return 'word';\n    case 'color':\n      return 'hexcolor';\n    case 'week':\n      return 'generateWeek';\n    case 'date':\n      return 'generateDate';\n    case 'time':\n      return 'generateTime';\n    case 'datetime-local':\n      return 'generateDateTime';\n    case 'month':\n      return 'generateMonth';\n    default:\n      return 'word';\n  }\n}\n\n// Get type-specific fallback functions for when search API doesn't find good matches\nfunction getTypeSpecificFallback(inputType: string): string {\n  switch (inputType) {\n    case 'email':\n      return 'email';\n    case 'tel':\n      return 'phone';\n    case 'number':\n      return 'number';\n    case 'date':\n      return 'date';\n    case 'time':\n      return 'time';\n    case 'datetime-local':\n      return 'datetime';\n    case 'month':\n      return 'month';\n    case 'week':\n      return 'week';\n    case 'url':\n      return 'url';\n    case 'password':\n      return 'password';\n    case 'search':\n      return 'word';\n    case 'color':\n      return 'color';\n    case 'text':\n    default:\n      return 'word';\n  }\n}\n\n// Create a comprehensive search query from input field characteristics\nfunction createSearchQuery(input: HTMLInputElement): string {\n  const type = input.type.toLowerCase();\n  const name = (input.name || '').toLowerCase();\n  const id = (input.id || '').toLowerCase();\n  const placeholder = (input.placeholder || '').toLowerCase();\n  const autocomplete = (input.autocomplete || '').toLowerCase();\n  const ariaLabel = (input.getAttribute('aria-label') || '').toLowerCase();\n  const labelText = getAssociatedLabelText(input);\n\n  // Build a comprehensive search query with all available information\n  const queryParts = [\n    type,\n    name,\n    id,\n    placeholder,\n    autocomplete,\n    ariaLabel,\n    labelText\n  ].filter(part => part && part.trim());\n\n  // Join all parts with spaces to create a comprehensive search query\n  const searchQuery = queryParts.join(' ').toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ') // Remove special characters\n    .replace(/\\s+/g, ' ') // Normalize whitespace\n    .trim();\n\n  return searchQuery || 'text input';\n}\n\n// Search for functions using the API endpoint based on input field characteristics\nasync function searchFunctionForInput(input: HTMLInputElement): Promise<string> {\n  const type = input.type.toLowerCase();\n  \n  // Skip search API for input types that don't need it\n  if (!needsSearchApi(type)) {\n    return getDefaultFunctionForInputType(type);\n  }\n\n  const searchQuery = createSearchQuery(input);\n\n  try {\n    const searchRequest: FuncSearchRequest = {\n      id: input.id || input.name || `input_${Date.now()}`,\n      query: searchQuery\n    };\n\n    const response = await searchMultiFunc([searchRequest]);\n    \n    if (response.success && response.data && response.data.length > 0) {\n      const searchResult = response.data[0];\n      if (searchResult.results && searchResult.results.length > 0) {\n        // Return the highest scoring function\n        const bestMatch = searchResult.results[0];\n        return bestMatch.name;\n      }\n    }\n  } catch (error) {\n    console.warn('[Gofakeit] Function search failed, falling back to default function:', error);\n  }\n\n  // Fallback to default function if search fails\n  return getDefaultFunctionForInputType(type);\n}\n\n// Search for functions for multiple inputs using the API endpoint\nexport async function searchFunctionsForInputs(inputs: HTMLInputElement[]): Promise<Map<HTMLInputElement, string>> {\n  const functionMap = new Map<HTMLInputElement, string>();\n  \n  if (inputs.length === 0) {\n    return functionMap;\n  }\n\n  try {\n    // Create search requests for all inputs using the shared createSearchQuery function\n    const searchRequests: FuncSearchRequest[] = inputs.map((input, index) => {\n      const searchQuery = createSearchQuery(input);\n      \n      return {\n        id: input.id || input.name || `input_${index}`,\n        query: searchQuery\n      };\n    });\n\n    const response = await searchMultiFunc(searchRequests);\n    \n    if (response.success && response.data) {\n      // Map results back to inputs with improved fallback logic\n      for (let i = 0; i < response.data.length; i++) {\n        const searchResult = response.data[i];\n        const input = inputs[i];\n        const inputType = input.type.toLowerCase();\n        \n        if (searchResult.results && searchResult.results.length > 0) {\n          const bestMatch = searchResult.results[0];\n          // Only use the search result if it has a reasonable score\n          if (bestMatch.score >= 100) {\n            functionMap.set(input, bestMatch.name);\n          } else {\n            // Use type-specific fallback for low-scoring results\n            functionMap.set(input, getTypeSpecificFallback(inputType));\n          }\n        } else {\n          // Fallback to type-specific function if no search results\n          functionMap.set(input, getTypeSpecificFallback(inputType));\n        }\n      }\n    } else {\n      // Fallback to default functions for all inputs if search fails\n      for (const input of inputs) {\n        functionMap.set(input, getDefaultFunctionForInputType(input.type.toLowerCase()));\n      }\n    }\n  } catch (error) {\n    console.warn('[Gofakeit] Multi-function search failed, falling back to default functions:', error);\n    // Fallback to default functions for all inputs\n    for (const input of inputs) {\n      functionMap.set(input, getDefaultFunctionForInputType(input.type.toLowerCase()));\n    }\n  }\n\n  return functionMap;\n}\n\n// Find the closest container that has form fields with data-gofakeit attributes\nexport function findFormContainer(element: HTMLElement): HTMLElement | null {\n  // Check if the current element has form fields\n  if (hasFormFields(element)) {\n    return element;\n  }\n  \n  // Check parent elements\n  let parent = element.parentElement;\n  while (parent) {\n    if (hasFormFields(parent)) {\n      return parent;\n    }\n    parent = parent.parentElement;\n  }\n  \n  return null;\n}\n\n// Simple notification function (can be overridden by the consuming application)\nfunction showNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): void {\n  console.log(`[Gofakeit ${type.toUpperCase()}] ${message}`);\n}\n\n// ============================================================================\n// BADGE FUNCTIONALITY\n// ============================================================================\n\n// Global tracking of active function badges\nconst activeBadges = new Map<\n  Element,\n  {\n    badge: HTMLElement;\n    timeout: ReturnType<typeof setTimeout>;\n    cleanup: () => void;\n  }\n>();\n\n// Display a small badge showing the function used for this field\nexport function showFunctionBadge(\n  element: Element,\n  funcName: string,\n  status: \"success\" | \"error\" = \"success\"\n): void {\n  if (!(element instanceof HTMLElement)) return;\n\n  // Remove any existing badges for this element\n  removeExistingBadges(element);\n\n  const badge = document.createElement(\"div\");\n  badge.textContent = funcName;\n  badge.style.position = \"fixed\";\n  badge.style.fontFamily = \"Arial, sans-serif\";\n  badge.style.fontSize = \"11px\";\n  badge.style.padding = \"3px 8px\";\n  badge.style.borderRadius = \"6px\";\n  badge.style.boxShadow = \"0 2px 6px rgba(0,0,0,0.25)\";\n  badge.style.zIndex = \"2147483647\";\n  badge.style.opacity = \"0\";\n  badge.style.transform = \"translateY(-6px)\";\n  badge.style.transition = \"opacity 200ms ease, transform 200ms ease\";\n  badge.style.pointerEvents = \"none\";\n\n  // Apply styling based on status\n  if (status === \"error\") {\n    badge.style.background = GOFAKEIT_COLORS.error;\n    badge.style.color = \"#fff\";\n    badge.style.border = `1px solid ${GOFAKEIT_COLORS.error}`;\n  } else {\n    badge.style.background = GOFAKEIT_COLORS.primary;\n    badge.style.color = \"#000\";\n  }\n\n  const updatePosition = () => {\n    const rect = element.getBoundingClientRect();\n    const vh = window.innerHeight || document.documentElement.clientHeight;\n    const vw = window.innerWidth || document.documentElement.clientWidth;\n\n    // If the element is completely out of the viewport, hide the badge entirely\n    const outOfView =\n      rect.bottom <= 0 || rect.top >= vh || rect.right <= 0 || rect.left >= vw;\n    if (outOfView) {\n      badge.style.display = \"none\";\n      return;\n    }\n\n    // Otherwise, ensure it's visible and position above-left of the field\n    if (badge.style.display === \"none\") badge.style.display = \"block\";\n    const top = rect.top - 8;\n    const left = rect.left;\n    badge.style.top = `${top}px`;\n    badge.style.left = `${left}px`;\n  };\n\n  document.body.appendChild(badge);\n  updatePosition();\n\n  // Animate in\n  requestAnimationFrame(() => {\n    badge.style.opacity = \"1\";\n    badge.style.transform = \"translateY(-12px)\";\n  });\n\n  // Track movement while visible\n  const onScroll = () => updatePosition();\n  const onResize = () => updatePosition();\n  window.addEventListener(\"scroll\", onScroll, true);\n  window.addEventListener(\"resize\", onResize, true);\n\n  // Observe element size/position changes\n  let ro: ResizeObserver | null = null;\n  if (typeof ResizeObserver !== \"undefined\") {\n    ro = new ResizeObserver(() => updatePosition());\n    try {\n      ro.observe(element);\n    } catch {\n      /* ignore */\n    }\n  }\n\n  // Create cleanup function\n  const cleanup = () => {\n    window.removeEventListener(\"scroll\", onScroll, true);\n    window.removeEventListener(\"resize\", onResize, true);\n    if (ro) {\n      try {\n        ro.disconnect();\n      } catch {\n        /* ignore */\n      }\n      ro = null;\n    }\n    if (badge.parentNode) badge.parentNode.removeChild(badge);\n    activeBadges.delete(element);\n  };\n\n  // Animate out and remove after extended delay\n  const DISPLAY_MS = 6000;\n  const timeout = setTimeout(() => {\n    badge.style.opacity = \"0\";\n    badge.style.transform = \"translateY(-6px)\";\n    setTimeout(cleanup, 220);\n  }, DISPLAY_MS);\n\n  // Track this badge\n  activeBadges.set(element, { badge, timeout, cleanup });\n}\n\n// Remove existing badges for a specific element\nfunction removeExistingBadges(element: Element): void {\n  // For radio buttons, remove badges for all radio buttons in the same group\n  if (\n    element instanceof HTMLInputElement &&\n    element.type === \"radio\" &&\n    element.name\n  ) {\n    const radioGroup = document.querySelectorAll(\n      `input[type=\"radio\"][name=\"${element.name}\"]`\n    );\n    radioGroup.forEach((radio) => {\n      const existing = activeBadges.get(radio);\n      if (existing) {\n        clearTimeout(existing.timeout);\n        existing.cleanup();\n        activeBadges.delete(radio);\n      }\n    });\n  } else {\n    // For other elements, just remove the badge for this specific element\n    const existing = activeBadges.get(element);\n    if (existing) {\n      clearTimeout(existing.timeout);\n      existing.cleanup();\n      activeBadges.delete(element);\n    }\n  }\n}","\n      import { autofill } from \"./src/index.ts\";\n\n      // Make functions available globally\n      window.autofill = async (target) => {\n        try {\n          // Get current settings\n          const settings = getCurrentSettings();\n\n          if (target) {\n            // If target is a string, treat it as a CSS selector (ID, class, or other)\n            if (typeof target === \"string\") {\n              // Scroll to the section first\n              const element = document.querySelector(target);\n              if (element) {\n                element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n                \n                // Wait a moment for the scroll to complete, then autofill\n                setTimeout(async () => {\n                  await autofill(target, settings);\n                  showStatus(\n                    `✅ ${target} section filled successfully!`,\n                    \"success\"\n                  );\n                }, 500);\n              } else {\n                showStatus(\"❌ Element not found: \" + target, \"error\");\n              }\n            } else {\n              await autofill(target, settings);\n              showStatus(\"✅ Element filled successfully!\", \"success\");\n            }\n          } else {\n            // No target - autofill all\n            await autofill(undefined, settings);\n            showStatus(\"✅ All fields filled successfully!\", \"success\");\n          }\n        } catch (error) {\n          showStatus(\"❌ Error filling fields: \" + error.message, \"error\");\n        }\n      };\n\n      // Function to handle category selection from dropdown\n      window.handleCategorySelection = async () => {\n        const selector = document.getElementById(\"categorySelector\");\n        const selectedCategory = selector.value;\n\n        if (!selectedCategory) {\n          return;\n        }\n\n        try {\n          // Map category values to their heading text\n          const categoryHeadingMap = {\n            \"person-category\": \"👤 Person Category\",\n            \"address-category\": \"🏠 Address Category\",\n            \"company-category\": \"🏢 Company Category\",\n            \"payment-category\": \"💳 Payment Category\",\n            \"internet-category\": \"🌐 Internet Category\",\n            \"time-category\": \"⏰ Time Category\",\n            \"language-category\": \"🗣️ Language Category\",\n            \"word-category\": \"📝 Word Category\",\n            \"color-category\": \"🎨 Color Category\",\n            \"animal-category\": \"🐾 Animal Category\",\n            \"food-category\": \"🍕 Food Category\",\n            \"car-category\": \"🚗 Car Category\",\n            \"game-category\": \"🎮 Game Category\",\n            \"misc-category\": \"🎲 Misc Category\",\n          };\n\n          // Find the specific category heading by text content\n          const headingText = categoryHeadingMap[selectedCategory];\n          let categoryHeading = null;\n          if (headingText) {\n            const allHeadings = document.querySelectorAll(\"h4\");\n            for (const heading of allHeadings) {\n              if (heading.textContent?.includes(headingText)) {\n                categoryHeading = heading;\n                break;\n              }\n            }\n          }\n\n          if (categoryHeading) {\n            categoryHeading.scrollIntoView({\n              behavior: \"smooth\",\n              block: \"start\",\n            });\n          } else {\n            // Fallback: scroll to the categories section\n            const section = document.getElementById(\"categories\");\n            if (section) {\n              section.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n            }\n          }\n\n          // Wait a moment for the scroll to complete, then autofill the specific fields\n          setTimeout(async () => {\n            // Find the category container\n            const categoryContainer = document.getElementById(selectedCategory);\n            if (!categoryContainer) {\n              showStatus(\"❌ Category container not found!\", \"error\");\n              return;\n            }\n\n            try {\n              // Get current settings\n              const settings = getCurrentSettings();\n\n              // Use the main autofill function with the category container\n              await autofill(categoryContainer, settings);\n\n              // Count filled elements\n              let filledCount = 0;\n              const inputs = categoryContainer.querySelectorAll(\n                \"input, textarea, select\"\n              );\n              inputs.forEach((element) => {\n                if (element instanceof HTMLInputElement) {\n                  if (element.type === \"checkbox\" || element.type === \"radio\") {\n                    if (element.checked) filledCount++;\n                  } else if (element.value) {\n                    filledCount++;\n                  }\n                } else if (\n                  element instanceof HTMLTextAreaElement ||\n                  element instanceof HTMLSelectElement\n                ) {\n                  if (element.value) filledCount++;\n                }\n              });\n\n              const categoryName = selector.options[selector.selectedIndex].text;\n              showStatus(\n                `✅ ${categoryName} filled successfully! (${filledCount} fields)`,\n                \"success\"\n              );\n            } catch (error) {\n              console.warn(\"Failed to fill category:\", error);\n              showStatus(\n                \"❌ Error filling category: \" + error.message,\n                \"error\"\n              );\n            }\n\n            // Reset the dropdown\n            selector.value = \"\";\n          }, 500);\n        } catch (error) {\n          showStatus(\"❌ Error filling category: \" + error.message, \"error\");\n          // Reset the dropdown even on error\n          selector.value = \"\";\n        }\n      };\n\n      // Function to get current settings from the UI controls\n      function getCurrentSettings() {\n        const smartMode = document.getElementById(\"smartMode\").checked;\n        const staggeredMode = document.getElementById(\"staggeredMode\").checked;\n        const staggerDelay = parseInt(\n          document.getElementById(\"staggerDelay\").value\n        );\n\n        return {\n          smart: smartMode,\n          staggered: staggeredMode,\n          staggerDelay: staggerDelay,\n        };\n      }\n\n      // Function to autofill with current settings\n      window.autofillWithCurrentSettings = async () => {\n        try {\n          const settings = getCurrentSettings();\n          await autofill(undefined, settings);\n\n          const modeText = settings.smart ? \"Smart Mode\" : \"Manual Mode\";\n          const staggerText = settings.staggered\n            ? ` (${settings.staggerDelay}ms delay)`\n            : \" (no stagger)\";\n          showStatus(\n            `✅ All fields filled with ${modeText}${staggerText}!`,\n            \"success\"\n          );\n        } catch (error) {\n          showStatus(\"❌ Error filling fields: \" + error.message, \"error\");\n        }\n      };\n\n      // Update stagger delay value display and handle theme toggle\n      document.addEventListener(\"DOMContentLoaded\", function () {\n        const staggerDelay = document.getElementById(\"staggerDelay\");\n        const staggerDelayValue = document.getElementById(\"staggerDelayValue\");\n        const themeToggle = document.getElementById(\"themeToggle\");\n        const themeIcon = themeToggle.querySelector(\".theme-icon\");\n\n        if (staggerDelay && staggerDelayValue) {\n          staggerDelay.addEventListener(\"input\", function () {\n            staggerDelayValue.textContent = this.value;\n          });\n        }\n\n        // Handle theme toggle\n        if (themeToggle) {\n          // Get user's saved preference or system preference\n          const savedTheme = localStorage.getItem(\"theme\");\n          const systemPrefersDark = window.matchMedia(\n            \"(prefers-color-scheme: dark)\"\n          ).matches;\n\n          // Use saved preference if available, otherwise use system preference\n          const shouldUseDark =\n            savedTheme === \"dark\" || (savedTheme === null && systemPrefersDark);\n\n          if (shouldUseDark) {\n            document.documentElement.setAttribute(\"data-theme\", \"dark\");\n            themeIcon.textContent = \"☀️\";\n          } else {\n            themeIcon.textContent = \"🌙\";\n          }\n\n          themeToggle.addEventListener(\"click\", function () {\n            const isDark = document.documentElement.hasAttribute(\"data-theme\");\n\n            if (isDark) {\n              // Switch to light mode\n              document.documentElement.removeAttribute(\"data-theme\");\n              localStorage.setItem(\"theme\", \"light\");\n              themeIcon.textContent = \"🌙\";\n            } else {\n              // Switch to dark mode\n              document.documentElement.setAttribute(\"data-theme\", \"dark\");\n              localStorage.setItem(\"theme\", \"dark\");\n              themeIcon.textContent = \"☀️\";\n            }\n          });\n\n          // Listen for system preference changes\n          window\n            .matchMedia(\"(prefers-color-scheme: dark)\")\n            .addEventListener(\"change\", function (e) {\n              // Only update if user hasn't set a preference\n              if (localStorage.getItem(\"theme\") === null) {\n                if (e.matches) {\n                  document.documentElement.setAttribute(\"data-theme\", \"dark\");\n                  themeIcon.textContent = \"☀️\";\n                } else {\n                  document.documentElement.removeAttribute(\"data-theme\");\n                  themeIcon.textContent = \"🌙\";\n                }\n              }\n            });\n        }\n      });\n\n      window.clearAll = () => {\n        // only search in main content container, not sidebar\n        const mainContent = document.querySelector(\".main-content\");\n        if (!mainContent) return;\n        \n        const inputs = mainContent.querySelectorAll(\"input, textarea, select\");\n        inputs.forEach((input) => {\n          if (input.type === \"checkbox\" || input.type === \"radio\") {\n            input.checked = false;\n          } else {\n            input.value = \"\";\n          }\n        });\n        showStatus(\"🧹 All fields cleared!\", \"success\");\n      };\n\n      function showStatus(message, type) {\n        const status = document.getElementById(\"status\");\n        status.textContent = message;\n        status.style.display = \"block\";\n        status.className = `status ${type} show`;\n\n        setTimeout(() => {\n          status.classList.remove(\"show\");\n          // Hide the status element completely after animation\n          setTimeout(() => {\n            status.style.display = \"none\";\n          }, 300);\n        }, 3000);\n      }\n\n      // Initialize the page\n      console.log(\"🎯 Gofakeit Autofill Comprehensive Testing loaded!\");\n      console.log(\n        \"This page tests the search API with various input contexts and categories.\"\n      );\n      console.log(\n        \"Check the browser network tab to see search API calls in action!\"\n      );\n    "],"names":["GOFAKEIT_COLORS","GOFAKEIT_API_BASE","callFunc","func","questionMarkIndex","functionName","queryString","params","searchParams","key","value","numValue","makeRequest","callMultiFunc","requests","processedRequests","req","index","id","makeMultiRequest","searchMultiFunc","makeSearchRequest","method","url","body","options","response","error","getDateTimeInput","element","gofakeitFunc","inputType","setDateTimeInput","generateTime","hour","minute","generateMonth","year","month","generateDate","day","generateDateTime","generateWeek","weekYearResponse","weekResponse","week","getISOWeek","date","d","week1","handleDateTimeInput","functionToCall","finalValue","handleError","fallbackFunc","getDefaultFunctionForInputType","fallbackResponse","dateMatch","datetimeMatch","getTextInput","setTextInput","handleTextInput","getTextarea","setTextarea","handleTextarea","handleCheckbox","checkboxGroup","findCheckboxGroup","cb","numToSelect","selectedIndices","i","boolResponse","availableIndices","_","randomIndex","values","v","shouldCheck","handleRadio","radioGroup","findRadioGroup","rb","selectedRadio","name","container","handleSelectWithFunction","option","val","opt","validOptions","randomOption","selectedValues","remainingOptions","getNumberInput","setNumberInput","handleNumberInput","getRangeInput","min","max","setRangeInput","clampedValue","handleRangeInput","autofill","target","settings","finalSettings","autofillAll","showNotification","hasFormFields","autofillContainer","success","autofillElement","findFormContainer","elements","queryFormElements","smartMode","targets","el","isDataGofakeitFalse","results","processElements","showResults","funcToUse","usedFunc","showBadgeWithTiming","passToHandler","selectedElement","inferred","searchFunctionForInput","selector","nodeList","getUniqueElements","uniqueElements","processedGroups","successfulCount","failedCount","searchInputElements","otherElements","hasSpecificFunction","needsSearchApi","inputFunctionMap","searchFunctionsForInputs","getElementFunction","excludedElements","batchElements","staggerDelay","resolve","promises","item","batchResponse","staggered","showFunctionBadge","autofillElementWithValue","context","message","getAssociatedLabelText","input","texts","labelledBy","ref","lbl","closestLabel","prev","getTypeSpecificFallback","createSearchQuery","type","placeholder","autocomplete","ariaLabel","labelText","part","searchQuery","searchRequest","searchResult","inputs","functionMap","searchRequests","bestMatch","parent","activeBadges","funcName","status","removeExistingBadges","badge","updatePosition","rect","vh","vw","top","left","onScroll","onResize","ro","cleanup","timeout","radio","existing","getCurrentSettings","showStatus","selectedCategory","headingText","categoryHeading","allHeadings","heading","section","categoryContainer","filledCount","categoryName","staggeredMode","modeText","staggerText","staggerDelayValue","themeToggle","themeIcon","savedTheme","systemPrefersDark","e","mainContent"],"mappings":"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"}