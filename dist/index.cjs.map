{"version":3,"file":"index.cjs","sources":["../src/styles.ts","../src/field-error.ts","../src/api.ts","../src/input-datetime.ts","../src/input-text.ts","../src/input-misc.ts","../src/input-number.ts","../src/autofill.ts"],"sourcesContent":["// Centralized style tokens for injected UI (avoid dependency on site CSS)\n\nexport const GOFAKEIT_COLORS = {\n\tprimary: '#ffa000',\n\twhite: '#ffffff',\n\tsuccess: '#48c774',\n\terror: '#ff3860',\n\tinfo: '#209cee',\n\ttext: '#ffffff',\n\tborder: '#686868',\n\tbackground: '#ffffff',\n};\n\nexport const GOFAKEIT_SPACING = {\n\tbase: 24, // px\n\thalf: 12, // px\n\tquarter: 8, // px\n};\n\nexport const GOFAKEIT_BORDER = {\n\tradius: 6, // px\n\twidth: 2, // px\n};\n\nexport const GOFAKEIT_FONT = {\n\tsize: 14, // px\n\tfamily: 'Helvetica, Arial, sans-serif',\n};\n","import { GOFAKEIT_COLORS, GOFAKEIT_SPACING, GOFAKEIT_BORDER, GOFAKEIT_FONT } from './styles';\n\n// Show error message as a floating tooltip over a form field\nexport function showFieldError(element: Element, message: string): void {\n  // Remove any existing error message\n  const existingError = document.querySelector('.gofakeit-error-tooltip');\n  if (existingError) {\n    existingError.remove();\n  }\n\n  // Create error tooltip element\n  const tooltip = document.createElement('div');\n  tooltip.className = 'gofakeit-error-tooltip';\n  tooltip.style.cssText = `\n    position: absolute;\n    z-index: 10001;\n    color: ${GOFAKEIT_COLORS.error};\n    font-size: ${GOFAKEIT_FONT.size}px;\n    font-family: ${GOFAKEIT_FONT.family};\n    background-color: ${GOFAKEIT_COLORS.background};\n    padding: ${GOFAKEIT_SPACING.quarter}px ${GOFAKEIT_SPACING.half}px;\n    border-radius: ${GOFAKEIT_BORDER.radius}px;\n    border: 1px solid ${GOFAKEIT_COLORS.error};\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    max-width: 300px;\n    word-wrap: break-word;\n    opacity: 0;\n    transform: translateY(-10px);\n    transition: opacity 0.3s ease, transform 0.3s ease;\n    pointer-events: none;\n  `;\n  tooltip.textContent = message;\n\n  // Add to body\n  document.body.appendChild(tooltip);\n\n  // Function to update tooltip position\n  function updateTooltipPosition() {\n    const rect = element.getBoundingClientRect();\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    \n    const left = rect.left + scrollLeft;\n    const top = rect.top + scrollTop - tooltip.offsetHeight - 8;\n    \n    tooltip.style.left = `${left}px`;\n    tooltip.style.top = `${top}px`;\n  }\n\n  // Initial positioning\n  updateTooltipPosition();\n\n  // Add scroll and resize listeners\n  const scrollHandler = () => updateTooltipPosition();\n  const resizeHandler = () => updateTooltipPosition();\n  \n  // Listen to scroll events on window and all scrollable elements\n  window.addEventListener('scroll', scrollHandler, { passive: true });\n  window.addEventListener('resize', resizeHandler, { passive: true });\n  \n  // Also listen to scroll events on all elements with overflow scroll\n  const scrollableElements = document.querySelectorAll('*');\n  const scrollableListeners: Array<{ element: Element, handler: () => void }> = [];\n  \n  scrollableElements.forEach(el => {\n    const style = window.getComputedStyle(el);\n    if (style.overflow === 'scroll' || style.overflowY === 'scroll' || style.overflow === 'auto' || style.overflowY === 'auto') {\n      const listener = () => updateTooltipPosition();\n      el.addEventListener('scroll', listener, { passive: true });\n      scrollableListeners.push({ element: el, handler: listener });\n    }\n  });\n\n  // Fade in\n  requestAnimationFrame(() => {\n    tooltip.style.opacity = '1';\n    tooltip.style.transform = 'translateY(0)';\n  });\n\n  // Remove tooltip after 5 seconds with fade out\n  setTimeout(() => {\n    tooltip.style.opacity = '0';\n    tooltip.style.transform = 'translateY(-10px)';\n    \n    // Remove event listeners\n    window.removeEventListener('scroll', scrollHandler);\n    window.removeEventListener('resize', resizeHandler);\n    \n    // Remove scrollable element listeners\n    scrollableListeners.forEach(({ element, handler }) => {\n      element.removeEventListener('scroll', handler);\n    });\n    \n    setTimeout(() => {\n      if (tooltip.parentElement) {\n        tooltip.parentElement.removeChild(tooltip);\n      }\n    }, 300);\n  }, 5000);\n}\n","// Base URL for the Gofakeit API\nconst GOFAKEIT_API_BASE = 'https://api.gofakeit.com/funcs'\n\nexport interface ApiResponse {\n  success: boolean;\n  data?: string;\n  error?: string;\n  status?: number;\n}\n\n// Multi-function request interface\nexport interface MultiFuncRequest {\n  id?: string;\n  func: string;\n  params?: Record<string, unknown>;\n}\n\n// Multi-function response interface\nexport interface MultiFuncResponse {\n  id?: string;\n  value: string | null;\n  error: string;\n}\n\n// Multi-function API response interface\nexport interface MultiFuncApiResponse {\n  success: boolean;\n  data?: MultiFuncResponse[];\n  error?: string;\n  status?: number;\n}\n\n// Function search request interface\nexport interface FuncSearchRequest {\n  id: string;\n  query: string;\n}\n\n// Function search result interface\nexport interface FuncSearchResult {\n  name: string;     // function name for API usage\n  score: number;    // relevance score (0-100)\n  reasons: string[]; // why it matched\n}\n\n// Function search response interface\nexport interface FuncSearchResponse {\n  id: string;\n  query: string;\n  results: FuncSearchResult[];\n}\n\n// Multi-function search API response interface\nexport interface MultiFuncSearchApiResponse {\n  success: boolean;\n  data?: FuncSearchResponse[];\n  error?: string;\n  status?: number;\n}\n\n// Fetch data from gofakeit API\nexport async function callFunc(func: string): Promise<ApiResponse> {\n  // Check if the function contains query parameters\n  const questionMarkIndex = func.indexOf('?');\n  \n  if (questionMarkIndex !== -1) {\n    // Function has query parameters - use POST with JSON body\n    const functionName = func.substring(0, questionMarkIndex);\n    const queryString = func.substring(questionMarkIndex + 1);\n    \n    // Parse query parameters into an object\n    const params: Record<string, unknown> = {};\n    const searchParams = new URLSearchParams(queryString);\n    \n    for (const [key, value] of searchParams.entries()) {\n      // Try to parse as number if possible\n      const numValue = parseFloat(value);\n      params[key] = isNaN(numValue) ? value : numValue;\n    }\n    \n    return makeRequest('POST', `${GOFAKEIT_API_BASE}/${functionName}`, params);\n  } else {\n    // Simple function - use GET request\n    return makeRequest('GET', `${GOFAKEIT_API_BASE}/${func}`);\n  }\n}\n\n// Fetch random string from an array of strings using gofakeit API\nexport async function fetchRandomString(strings: string[]): Promise<ApiResponse> {\n  return makeRequest('POST', `${GOFAKEIT_API_BASE}/randomstring`, { strs: strings });\n}\n\n// Call multiple functions in a single request\nexport async function callMultiFunc(requests: MultiFuncRequest[]): Promise<MultiFuncApiResponse> {\n  if (requests.length === 0) {\n    return {\n      success: false,\n      error: 'No functions provided'\n    };\n  }\n\n  // Process each request to extract function name and parameters\n  const processedRequests: MultiFuncRequest[] = requests.map((req, index) => {\n    const { func, id } = req;\n    const questionMarkIndex = func.indexOf('?');\n    \n    if (questionMarkIndex !== -1) {\n      // Function has query parameters\n      const functionName = func.substring(0, questionMarkIndex);\n      const queryString = func.substring(questionMarkIndex + 1);\n      \n      // Parse query parameters into an object\n      const params: Record<string, unknown> = {};\n      const searchParams = new URLSearchParams(queryString);\n      \n      for (const [key, value] of searchParams.entries()) {\n        // Try to parse as number if possible\n        const numValue = parseFloat(value);\n        params[key] = isNaN(numValue) ? value : numValue;\n      }\n      \n      return {\n        id: id || `req_${index}`,\n        func: functionName,\n        params\n      };\n    } else {\n      // Simple function\n      return {\n        id: id || `req_${index}`,\n        func,\n        params: req.params\n      };\n    }\n  });\n\n  return makeMultiRequest('POST', `${GOFAKEIT_API_BASE}/multi`, processedRequests);\n}\n\n// Search for multiple functions in a single request\nexport async function searchMultiFunc(requests: FuncSearchRequest[]): Promise<MultiFuncSearchApiResponse> {\n  if (requests.length === 0) {\n    return {\n      success: false,\n      error: 'No search queries provided'\n    };\n  }\n\n  return makeSearchRequest('POST', `${GOFAKEIT_API_BASE}/search`, requests);\n}\n\n// Base HTTP request function\nasync function makeRequest(method: 'GET' | 'POST', url: string, body?: Record<string, unknown>): Promise<ApiResponse> {\n  try {\n    const options: {\n      method: string;\n      headers: Record<string, string>;\n      body?: string;\n    } = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (method === 'POST' && body) {\n      options.body = JSON.stringify(body);\n    }\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      return {\n        success: false,\n        error: `HTTP error! status: ${response.status}`,\n        status: response.status\n      };\n    }\n    \n    const data = await response.text();\n    return {\n      success: true,\n      data: data\n    };\n  } catch (error) {\n    console.error(`[Gofakeit Autofill] Error in ${method} request to ${url}:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Multi-function HTTP request function\nasync function makeMultiRequest(method: 'GET' | 'POST', url: string, body: MultiFuncRequest[]): Promise<MultiFuncApiResponse> {\n  try {\n    const options: {\n      method: string;\n      headers: Record<string, string>;\n      body: string;\n    } = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    };\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      return {\n        success: false,\n        error: `HTTP error! status: ${response.status}`,\n        status: response.status\n      };\n    }\n    \n    const data = await response.json();\n    return {\n      success: true,\n      data: data\n    };\n  } catch (error) {\n    console.error(`[Gofakeit Autofill] Error in ${method} request to ${url}:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Multi-function search HTTP request function\nasync function makeSearchRequest(method: 'GET' | 'POST', url: string, body: FuncSearchRequest[]): Promise<MultiFuncSearchApiResponse> {\n  try {\n    const options: {\n      method: string;\n      headers: Record<string, string>;\n      body: string;\n    } = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    };\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      return {\n        success: false,\n        error: `HTTP error! status: ${response.status}`,\n        status: response.status\n      };\n    }\n    \n    const data = await response.json();\n    return {\n      success: true,\n      data: data\n    };\n  } catch (error) {\n    console.error(`[Gofakeit Autofill] Error in ${method} request to ${url}:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n","import { callFunc } from './api';\nimport { handleError } from './autofill';\n\n// Get function name for date/time input (for batch processing)\nexport function getDateTimeInput(element: HTMLInputElement, gofakeitFunc: string): string {\n  const inputType = element.type.toLowerCase();\n  \n  // For inputs that use a single function\n  if (inputType === 'date' || inputType === 'datetime-local') {\n    return gofakeitFunc === 'true' ? 'date' : gofakeitFunc;\n  }\n  \n  // For inputs that use multiple functions, we'll use generate functions\n  if (inputType === 'time') {\n    return 'generateTime';\n  }\n  \n  if (inputType === 'month') {\n    return 'generateMonth';\n  }\n  \n  if (inputType === 'week') {\n    return gofakeitFunc === 'true' ? 'generateWeek' : gofakeitFunc;\n  }\n  \n  return gofakeitFunc;\n}\n\n// Set date/time input value (for batch processing)\nexport function setDateTimeInput(element: HTMLInputElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Generate time string (HH:MM format)\nexport async function generateTime(): Promise<string> {\n  const hourResponse = await callFunc('hour');\n  const minuteResponse = await callFunc('minute');\n  \n  if (!hourResponse.success || !minuteResponse.success) {\n    throw new Error(`Failed to generate time: ${hourResponse.error || minuteResponse.error}`);\n  }\n  \n  const hour = hourResponse.data!.padStart(2, '0');\n  const minute = minuteResponse.data!.padStart(2, '0');\n  return `${hour}:${minute}`;\n}\n\n// Generate month string (YYYY-MM format)\nexport async function generateMonth(): Promise<string> {\n  const yearResponse = await callFunc('year');\n  const monthResponse = await callFunc('month');\n  \n  if (!yearResponse.success || !monthResponse.success) {\n    throw new Error(`Failed to generate month: ${yearResponse.error || monthResponse.error}`);\n  }\n  \n  const month = monthResponse.data!.padStart(2, '0');\n  return `${yearResponse.data!}-${month}`;\n}\n\n// Generate week string (YYYY-W## format)\nexport async function generateWeek(): Promise<string> {\n  const weekYearResponse = await callFunc('year');\n  const weekResponse = await callFunc('number?min=1&max=53');\n  \n  if (!weekYearResponse.success || !weekResponse.success) {\n    throw new Error(`Failed to generate week: ${weekYearResponse.error || weekResponse.error}`);\n  }\n  \n  const week = weekResponse.data!.padStart(2, '0');\n  return `${weekYearResponse.data!}-W${week}`;\n}\n\n// Get ISO week number for a date\nfunction getISOWeek(date: Date): number {\n  const d = new Date(date.getTime());\n  d.setUTCHours(0, 0, 0, 0);\n  // Thursday in current week decides the year\n  d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));\n  // January 4 is always in week 1\n  const week1 = new Date(d.getUTCFullYear(), 0, 4);\n  // Adjust to Thursday in week 1 and count number of weeks from date to week1\n  const week = Math.ceil((((d.getTime() - week1.getTime()) / 86400000) - 3 + (week1.getUTCDay() || 7)) / 7);\n  return week;\n}\n\n// Handle date/time input elements\nexport async function handleDateTimeInput(element: HTMLInputElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string }> {\n  const inputType = element.type.toLowerCase();\n  const functionToCall = getDateTimeInput(element, gofakeitFunc);\n  \n  try {\n    let finalValue: string;\n    \n    // If value is provided (batch processing), use it directly\n    if (value !== undefined) {\n      finalValue = value;\n    } else {\n      // Handle generate functions (multi-function cases)\n      if (functionToCall === 'generateTime') {\n        finalValue = await generateTime();\n      } else if (functionToCall === 'generateMonth') {\n        finalValue = await generateMonth();\n      } else if (functionToCall === 'generateWeek') {\n        finalValue = await generateWeek();\n      } else {\n        // Handle single function cases\n        const response = await callFunc(functionToCall);\n        \n        if (!response.success) {\n          console.warn(`[Gofakeit Autofill] Error for ${inputType} input:`, response.error);\n          if (response.status === 400) {\n            handleError(element, `Failed to get random ${inputType}`);\n          }\n          return { success: false, usedFunc: functionToCall };\n        }\n        \n        finalValue = response.data!;\n      }\n    }\n    \n    // Parse and format the value based on input type\n    if (inputType === 'date') {\n      // Extract YYYY-MM-DD part from ISO date string\n      const dateMatch = finalValue.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n      if (dateMatch) {\n        finalValue = dateMatch[1];\n      } else {\n        console.warn('[Gofakeit Autofill] Could not parse date from response:', finalValue);\n        return { success: false, usedFunc: functionToCall };\n      }\n    } else if (inputType === 'datetime-local') {\n      // Extract YYYY-MM-DDTHH:MM part from ISO datetime string\n      const datetimeMatch = finalValue.match(/^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}):\\d{2}/);\n      if (datetimeMatch) {\n        finalValue = datetimeMatch[1];\n      } else {\n        console.warn('[Gofakeit Autofill] Could not parse datetime from response:', finalValue);\n        return { success: false, usedFunc: functionToCall };\n      }\n    } else if (inputType === 'week' && functionToCall !== 'generateWeek') {\n      // Handle custom week functions (like date/daterange)\n      if (functionToCall === 'date' || functionToCall.startsWith('daterange')) {\n        const dateMatch = finalValue.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n        if (dateMatch) {\n          const date = new Date(dateMatch[1]);\n          const year = date.getFullYear();\n          const week = getISOWeek(date);\n          finalValue = `${year}-W${week.toString().padStart(2, '0')}`;\n        } else {\n          console.warn('[Gofakeit Autofill] Could not parse date for week from response:', finalValue);\n          return { success: false, usedFunc: functionToCall };\n        }\n      }\n    }\n    \n    setDateTimeInput(element, finalValue);\n    return { success: true, usedFunc: functionToCall };\n    \n  } catch (error) {\n    console.warn(`[Gofakeit Autofill] Unexpected error handling ${inputType} input:`, error);\n    return { success: false, usedFunc: functionToCall };\n  }\n}\n","import { callFunc } from './api';\nimport { handleError } from './autofill';\n\n// Get function name for text input (for batch processing)\nexport function getTextInput(element: HTMLInputElement, gofakeitFunc: string): string {\n  const inputType = element.type.toLowerCase();\n  \n  // Map input types to appropriate gofakeit functions if 'true' is passed\n  if (gofakeitFunc === 'true') {\n    switch (inputType) {\n      case 'email':\n        return 'email';\n      case 'tel':\n        return 'phone';\n      case 'password':\n        return 'password';\n      case 'search':\n        return 'word';\n      case 'url':\n        return 'url';\n      case 'color':\n        return 'hexcolor';\n      default:\n        return 'word'; // Default for text inputs\n    }\n  }\n  \n  return gofakeitFunc;\n}\n\n// Set text input value (for batch processing)\nexport function setTextInput(element: HTMLInputElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Handle text input elements (text, email, tel, password, search, url, color)\nexport async function handleTextInput(element: HTMLInputElement, gofakeitFunc: string): Promise<{ success: boolean, usedFunc: string }> {\n  const functionToCall = getTextInput(element, gofakeitFunc);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, '', functionToCall);\n    }\n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setTextInput(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n\n// Get function name for textarea (for batch processing)\nexport function getTextarea(gofakeitFunc: string): string {\n  return gofakeitFunc === 'true' ? 'sentence' : gofakeitFunc;\n}\n\n// Set textarea value (for batch processing)\nexport function setTextarea(element: HTMLTextAreaElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Handle textarea elements\nexport async function handleTextarea(element: HTMLTextAreaElement, gofakeitFunc: string): Promise<{ success: boolean, usedFunc: string }> {\n  // Use sentence function if 'true' is passed, otherwise use the provided function\n  const functionToCall = getTextarea(gofakeitFunc);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, '', functionToCall);\n    }\n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setTextarea(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n\n","import { callFunc, fetchRandomString } from './api';\nimport { handleError } from './autofill';\n\n// Handle checkbox input elements\nexport async function handleCheckbox(element: HTMLInputElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string }> {\n  // Find the checkbox group by name\n  const checkboxGroup = findCheckboxGroup(element);\n  \n  if (checkboxGroup.length === 0) {\n    console.warn('[Gofakeit Autofill] No checkbox group found for element:', element);\n    return { success: false, usedFunc: 'bool' };\n  }\n  \n  // Use boolean function if 'true' is passed, otherwise use the provided function\n  const functionToCall = gofakeitFunc === 'true' ? 'bool' : gofakeitFunc;\n  \n  // If value is provided (from batch), use it directly\n  if (value !== undefined) {\n    // Clear all checkboxes first\n    checkboxGroup.forEach(cb => {\n      cb.checked = false;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // For boolean values, check if it's true\n    const boolValue = String(value).toLowerCase() === 'true' || value === '1' || String(value).toLowerCase() === 'yes';\n    if (boolValue && checkboxGroup.length > 0) {\n      // Select the first checkbox if value is true\n      checkboxGroup[0].checked = true;\n      checkboxGroup[0].dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    return { success: true, usedFunc: functionToCall };\n  }\n  \n  // For checkbox groups, we want to select multiple checkboxes\n  if (gofakeitFunc === 'true') {\n    // Select roughly half of the checkboxes in the group\n    const numToSelect = Math.max(1, Math.ceil(checkboxGroup.length / 2));\n    \n    // Clear all checkboxes first\n    checkboxGroup.forEach(cb => {\n      cb.checked = false;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Select random checkboxes using API\n    const selectedIndices = new Set<number>();\n    for (let i = 0; i < numToSelect; i++) {\n      const boolResponse = await callFunc('bool');\n      if (boolResponse.success) {\n        const shouldSelect = boolResponse.data!.toLowerCase() === 'true' || boolResponse.data!.toLowerCase() === '1';\n        if (shouldSelect) {\n          // Find an unselected checkbox\n          const availableIndices = Array.from({ length: checkboxGroup.length }, (_, i) => i)\n            .filter(i => !selectedIndices.has(i));\n          \n          if (availableIndices.length > 0) {\n            const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\n            selectedIndices.add(randomIndex);\n            checkboxGroup[randomIndex].checked = true;\n            checkboxGroup[randomIndex].dispatchEvent(new Event('change', { bubbles: true }));\n          }\n        }\n      }\n    }\n  } else {\n    // For custom functions, use the response to determine which checkboxes to select\n    const response = await callFunc(functionToCall);\n    \n    if (!response.success) {\n      console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n      \n      if (response.status === 400) {\n        handleError(element, '', functionToCall);\n      }\n      return { success: false, usedFunc: functionToCall };\n    }\n    \n    // Clear all checkboxes first\n    checkboxGroup.forEach(cb => {\n      cb.checked = false;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Parse the response to determine which checkboxes to select\n    const values = response.data!.split(',').map(v => v.trim());\n    \n    checkboxGroup.forEach((cb, index) => {\n      const shouldCheck = values.includes(cb.value) || values.includes(index.toString());\n      cb.checked = shouldCheck;\n      cb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n  }\n  \n  return { success: true, usedFunc: functionToCall };\n}\n\n// Handle radio inputs\nexport async function handleRadio(element: HTMLInputElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string, selectedElement?: HTMLInputElement }> {\n  const radioGroup = findRadioGroup(element);\n  // For radio buttons, when 'true' is passed, we actually use 'bool' function\n  const functionToCall = gofakeitFunc === 'true' ? 'bool' : gofakeitFunc;\n  \n  // If a specific value is provided, try to select that radio button\n  if (value !== undefined) {\n    // Clear all radio buttons first\n    radioGroup.forEach((rb: HTMLInputElement) => {\n      rb.checked = false;\n      rb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Try to find by value first, then by index\n    let selectedRadio = radioGroup.find((rb: HTMLInputElement) => rb.value === value);\n    if (!selectedRadio && !isNaN(Number(value))) {\n      const index = parseInt(value);\n      if (index >= 0 && index < radioGroup.length) {\n        selectedRadio = radioGroup[index];\n      }\n    }\n    \n    // If no match found, select the first one\n    if (selectedRadio) {\n      selectedRadio.checked = true;\n      selectedRadio.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    return { success: true, usedFunc: functionToCall, selectedElement: selectedRadio };\n  }\n  \n  // For radio groups, we want to select exactly one radio button\n  if (gofakeitFunc === 'true') {\n    // Clear all radio buttons first\n    radioGroup.forEach((rb: HTMLInputElement) => {\n      rb.checked = false;\n      rb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Always select exactly one random radio button\n    const randomIndex = Math.floor(Math.random() * radioGroup.length);\n    radioGroup[randomIndex].checked = true;\n    radioGroup[randomIndex].dispatchEvent(new Event('change', { bubbles: true }));\n    \n    return { success: true, usedFunc: functionToCall, selectedElement: radioGroup[randomIndex] };\n  } else {\n    // For custom functions, use the response to determine which radio button to select\n    const response = await callFunc(functionToCall);\n    \n    if (!response.success) {\n      console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n      \n      if (response.status === 400) {\n        handleError(element, '', functionToCall);\n      }\n      return { success: false, usedFunc: functionToCall };\n    }\n    \n    // Clear all radio buttons first\n    radioGroup.forEach((rb: HTMLInputElement) => {\n      rb.checked = false;\n      rb.dispatchEvent(new Event('change', { bubbles: true }));\n    });\n    \n    // Parse the response to determine which radio button to select\n    const value = response.data!.trim();\n    \n    // Try to find by value first, then by index\n    let selectedRadio = radioGroup.find((rb: HTMLInputElement) => rb.value === value);\n    if (!selectedRadio && !isNaN(Number(value))) {\n      const index = parseInt(value);\n      if (index >= 0 && index < radioGroup.length) {\n        selectedRadio = radioGroup[index];\n      }\n    }\n    \n    // If no match found, select a random one to ensure exactly one is selected\n    if (selectedRadio) {\n      selectedRadio.checked = true;\n      selectedRadio.dispatchEvent(new Event('change', { bubbles: true }));\n      \n      return { success: true, usedFunc: functionToCall, selectedElement: selectedRadio };\n    } else {\n      // Fallback: select a random radio button\n      const randomIndex = Math.floor(Math.random() * radioGroup.length);\n      radioGroup[randomIndex].checked = true;\n      radioGroup[randomIndex].dispatchEvent(new Event('change', { bubbles: true }));\n      \n      return { success: true, usedFunc: functionToCall, selectedElement: radioGroup[randomIndex] };\n    }\n  }\n}\n\n// Helper function to find checkbox group\nfunction findCheckboxGroup(element: HTMLInputElement): HTMLInputElement[] {\n  if (element.type !== 'checkbox') return [element];\n  \n  // Look for checkboxes with the same name or in the same container\n  const name = element.name;\n  const container = element.closest('form, div, fieldset') || document;\n  \n  if (name) {\n    // Find checkboxes with the same name\n    return Array.from(container.querySelectorAll(`input[type=\"checkbox\"][name=\"${name}\"]`));\n  } else {\n    // Find checkboxes in the same container\n    return Array.from(container.querySelectorAll('input[type=\"checkbox\"]'));\n  }\n}\n\n// Helper function to find radio group\nfunction findRadioGroup(element: HTMLInputElement): HTMLInputElement[] {\n  if (element.type !== 'radio') return [element];\n  \n  // Look for radio buttons with the same name\n  const name = element.name;\n  \n  if (name) {\n    // Search the entire document for radio buttons with the same name\n    const radioButtons = Array.from(document.querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)) as HTMLInputElement[];\n    return radioButtons;\n  } else {\n    // Find radio buttons in the same container\n    const container = element.closest('form, div, fieldset') || document;\n    const radioButtons = Array.from(container.querySelectorAll('input[type=\"radio\"]')) as HTMLInputElement[];\n    return radioButtons;\n  }\n}\n\n// Handle select dropdown\nexport async function handleSelectWithFunction(element: HTMLSelectElement, gofakeitFunc: string, value?: string): Promise<{ success: boolean, usedFunc: string }> {\n  const options = Array.from(element.options).map(option => option.value).filter(value => value !== '');\n  \n  if (options.length === 0) {\n    console.warn('[Gofakeit Autofill] Select element has no valid options:', element);\n    return { success: false, usedFunc: gofakeitFunc };\n  }\n  \n  // If value is provided (from batch), use it directly\n  if (value !== undefined) {\n    if (element.multiple) {\n      // Handle multiselect\n      Array.from(element.options).forEach(option => option.selected = false);\n      \n      // Parse comma-separated values\n      const selectedValues = value.split(',').map(val => val.trim()).filter(val => val !== '');\n      selectedValues.forEach(value => {\n        const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n        if (option) option.selected = true;\n      });\n    } else {\n      // Try to set the value directly\n      const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n      if (option) {\n        element.value = value;\n      } else {\n        // If the value doesn't match any option, select a random option\n        const validOptions = options.filter(opt => opt !== '');\n        if (validOptions.length > 0) {\n          const randomOption = validOptions[Math.floor(Math.random() * validOptions.length)];\n          element.value = randomOption;\n        } else {\n          // If no valid options, don't set any value\n          return { success: false, usedFunc: gofakeitFunc };\n        }\n      }\n    }\n    \n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    return { success: true, usedFunc: gofakeitFunc === 'true' ? 'random' : gofakeitFunc };\n  }\n  \n  let response;\n  if (gofakeitFunc === 'true') {\n    // Use random selection for 'true'\n    response = await fetchRandomString(options);\n  } else {\n    // Use custom function\n    response = await callFunc(gofakeitFunc);\n  }\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for select:`, response.error);\n    if (response.status === 400) {\n      handleError(element, 'Failed to get selection');\n    }\n    return { success: false, usedFunc: gofakeitFunc };\n  }\n  \n  if (element.multiple) {\n    // Handle multiselect\n    Array.from(element.options).forEach(option => option.selected = false);\n    \n    if (gofakeitFunc === 'true') {\n      // For random selection, select multiple options (roughly half)\n      const numToSelect = Math.min(Math.ceil(options.length / 2), options.length);\n      const selectedValues = [response.data!];\n      \n      // Add more random selections\n      const remainingOptions = options.filter(opt => opt !== response.data!);\n      for (let i = 1; i < numToSelect && remainingOptions.length > 0; i++) {\n        const randomIndex = Math.floor(Math.random() * remainingOptions.length);\n        selectedValues.push(remainingOptions.splice(randomIndex, 1)[0]);\n      }\n      \n      selectedValues.forEach(value => {\n        const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n        if (option) option.selected = true;\n      });\n    } else {\n      // Parse comma-separated values for custom function\n      const selectedValues = response.data!.split(',').map(val => val.trim()).filter(val => val !== '');\n      selectedValues.forEach(value => {\n        const option = element.options.namedItem(value) || Array.from(element.options).find(opt => opt.value === value);\n        if (option) option.selected = true;\n      });\n    }\n  } else {\n    element.value = response.data!;\n  }\n  \n  element.dispatchEvent(new Event('change', { bubbles: true }));\n  return { success: true, usedFunc: gofakeitFunc === 'true' ? 'random' : gofakeitFunc };\n}\n","import { callFunc } from './api';\nimport { handleError } from './autofill';\n\n// Get function name for number input (for batch processing)\nexport function getNumberInput(gofakeitFunc: string): string {\n  return gofakeitFunc === 'true' ? 'number' : gofakeitFunc;\n}\n\n// Set number input value (for batch processing)\nexport function setNumberInput(element: HTMLInputElement, value: string): void {\n  element.value = value;\n  element.dispatchEvent(new Event('input', { bubbles: true }));\n  element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n\n// Handle number input elements\nexport async function handleNumberInput(element: HTMLInputElement, gofakeitFunc: string): Promise<{ success: boolean, usedFunc: string }> {\n  // Use number function if 'true' is passed, otherwise use the provided function\n  const functionToCall = getNumberInput(gofakeitFunc);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for function ${functionToCall}:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, '', functionToCall);\n    }\n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setNumberInput(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n\n// Get function name for range input (for batch processing)\nexport function getRangeInput(element: HTMLInputElement): string {\n  const min = parseFloat(element.min) || 0;\n  const max = parseFloat(element.max) || 100;\n  return `number?min=${min}&max=${max}`;\n}\n\n// Set range input value (for batch processing)\nexport function setRangeInput(element: HTMLInputElement, value: string): void {\n  const numValue = parseFloat(value);\n  if (!isNaN(numValue)) {\n    const min = parseFloat(element.min) || 0;\n    const max = parseFloat(element.max) || 100;\n    const clampedValue = Math.max(min, Math.min(max, numValue));\n    element.value = clampedValue.toString();\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n  }\n}\n\n// Handle range input elements\nexport async function handleRangeInput(element: HTMLInputElement): Promise<{ success: boolean, usedFunc: string }> {\n  // For range inputs, always use gofakeit API with min/max from the element\n  const functionToCall = getRangeInput(element);\n  \n  const response = await callFunc(functionToCall);\n  \n  if (!response.success) {\n    console.warn(`[Gofakeit Autofill] Error for range input:`, response.error);\n    \n    if (response.status === 400) {\n      handleError(element, 'Failed to get random number for range');\n    }\n    return { success: false, usedFunc: functionToCall };\n  }\n  \n  setRangeInput(element, response.data!);\n  return { success: true, usedFunc: functionToCall };\n}\n","import { GOFAKEIT_COLORS } from './styles';\nimport { showFieldError } from './field-error';\nimport { handleDateTimeInput } from './input-datetime';\nimport { handleTextInput, handleTextarea, getTextarea, setTextInput, setTextarea } from './input-text';\nimport { handleCheckbox, handleRadio, handleSelectWithFunction } from './input-misc';\nimport { handleNumberInput, handleRangeInput, getRangeInput, setNumberInput, setRangeInput } from './input-number';\nimport { callMultiFunc, MultiFuncRequest, searchMultiFunc, FuncSearchRequest } from './api';\n\n// Settings interface for autofill configuration\nexport interface AutofillSettings {\n  smart?: boolean;\n  staggered?: boolean;\n  staggerDelay?: number;\n}\n\n// ============================================================================\n// MAIN PUBLIC FUNCTIONS (Entry Points)\n// ============================================================================\n\n// Unified autofill function that handles all cases\nexport async function autofill(target?: HTMLElement | Element, settings?: AutofillSettings): Promise<boolean | void> {\n  const defaultSettings: AutofillSettings = { smart: true }; // Default to true for backward compatibility\n  const finalSettings = { ...defaultSettings, ...settings };\n  \n  // No parameters - autofill all form fields on the page\n  if (!target) {\n    return autofillAll(finalSettings);\n  }\n  \n  // If target is a container (has form fields), autofill the container\n  if (target instanceof HTMLElement && hasFormFields(target)) {\n    return autofillContainer(target, finalSettings);\n  }\n  \n  // If target is a form element, autofill just that element\n  if (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement) {\n    const success = await autofillElement(target, finalSettings);\n    if (!success) {\n      showNotification('Failed to autofill the specified element', 'error');\n    }\n    return success;\n  }\n  \n  // If target is a container but doesn't have form fields, try to find a container\n  if (target instanceof HTMLElement) {\n    const container = findFormContainer(target);\n    if (container) {\n      return autofillContainer(container, finalSettings);\n    }\n  }\n  \n  // For non-form elements, return false instead of falling back to autofill all\n  return false;\n}\n\n// Autofill all form fields on the page\nasync function autofillAll(settings: AutofillSettings): Promise<void> {\n  const elements = queryFormElements();\n  const smartMode = settings.smart ?? true;\n\n  // Smart mode: Fill ALL form fields (except those explicitly excluded)\n  // Manual mode: Only fill fields with data-gofakeit attributes\n  const targetsBase = smartMode\n    ? elements\n    : elements.filter((el) => (el as Element).hasAttribute('data-gofakeit'));\n  const targets = targetsBase.filter((el) => !isDataGofakeitFalse(el));\n\n  if (targets.length === 0) {\n    if (!smartMode) {\n      showNotification('No data-gofakeit fields exist. Turn on Smart mode to fill all form fields.', 'info');\n    } else {\n      showNotification('No form fields found to autofill', 'info');\n    }\n    return;\n  }\n\n  console.log(`[Gofakeit] Found ${targets.length} elements to generate data for`);\n  showNotification(`Starting data generation for ${targets.length} fields...`, 'info');\n\n  const results = await processElements(targets, settings);\n  showResults(results.success, results.failed, 'Autofill');\n}\n\n// Autofill all fields within a specific container\nasync function autofillContainer(container: HTMLElement, settings: AutofillSettings): Promise<void> {\n  const elements = queryFormElements(container);\n  const smartMode = settings.smart ?? true;\n\n  // Smart mode: Fill ALL form fields in container (except those explicitly excluded)\n  // Manual mode: Only fill fields with data-gofakeit attributes\n  const targetsBase = smartMode\n    ? elements\n    : elements.filter((el) => (el as Element).hasAttribute('data-gofakeit'));\n  const targets = targetsBase.filter((el) => !isDataGofakeitFalse(el));\n\n  if (targets.length === 0) {\n    if (!smartMode) {\n      showNotification('No data-gofakeit fields exist in this section. Turn on Smart mode to fill all form fields.', 'info');\n    } else {\n      showNotification('No form fields found in this container', 'info');\n    }\n    return;\n  }\n  \n  console.log(`[Gofakeit] Found ${targets.length} elements to generate data for in container`);\n  showNotification(`Starting data generation for ${targets.length} fields...`, 'info');\n  \n  const results = await processElements(targets, settings);\n  showResults(results.success, results.failed, 'Container autofill');\n}\n\n// Main autofill function that routes to specific handlers\nasync function autofillElement(element: Element, settings: AutofillSettings): Promise<boolean> {\n  const gofakeitFunc = element.getAttribute('data-gofakeit');\n  if (typeof gofakeitFunc === 'string' && gofakeitFunc.trim().toLowerCase() === 'false') {\n    return false;\n  }\n  \n  const smartMode = settings.smart ?? true;\n  // Smart mode: Fill any form field (even without data-gofakeit attribute)\n  // Manual mode: Only fill fields that have data-gofakeit attributes\n  if (!gofakeitFunc && !smartMode) {\n    return false;\n  }\n\n  try {\n    // Handle select dropdowns\n    if (element instanceof HTMLSelectElement) {\n      const funcToUse = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n      const { success, usedFunc } = await handleSelectWithFunction(element, funcToUse);\n      if (success) {\n        showFunctionBadgeWithDelay(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    // Handle textarea elements\n    if (element instanceof HTMLTextAreaElement) {\n      const funcToUse = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'sentence';\n      const { success, usedFunc } = await handleTextarea(element, funcToUse);\n      if (success) {\n        showFunctionBadgeWithDelay(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    // Handle input elements\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      // Handle checkbox inputs\n      if (inputType === 'checkbox') {\n        const passToHandler = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n        const { success, usedFunc } = await handleCheckbox(element, passToHandler);\n        if (success) {\n          showFunctionBadgeWithDelay(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle radio inputs\n      if (inputType === 'radio') {\n        const passToHandler = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n        const { success, usedFunc, selectedElement } = await handleRadio(element, passToHandler);\n        if (success) {\n          // Show function badge over the selected radio button, not the original one\n          const elementToShowBadge = selectedElement || element;\n          showFunctionBadgeWithDelay(elementToShowBadge, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle range inputs\n      if (inputType === 'range') {\n        const { success, usedFunc } = await handleRangeInput(element);\n        if (success) {\n          showFunctionBadgeWithDelay(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle all other input types (text, email, tel, password, search, url, color, number, date, etc.)\n      const inferred = (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : await searchFunctionForInput(element);\n      \n      // Route to appropriate handler based on input type\n      if (inputType === 'number') {\n        const { success, usedFunc } = await handleNumberInput(element, inferred);\n        if (success) {\n          showFunctionBadgeWithDelay(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      if (inputType === 'date' || inputType === 'time' || inputType === 'datetime-local' || \n          inputType === 'month' || inputType === 'week') {\n        const { success, usedFunc } = await handleDateTimeInput(element, inferred);\n        if (success) {\n          showFunctionBadgeWithDelay(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle text inputs (text, email, tel, password, search, url, color, etc.)\n      const { success, usedFunc } = await handleTextInput(element, inferred);\n      if (success) {\n        showFunctionBadgeWithDelay(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    console.warn('[Gofakeit] Unsupported element type:', element);\n    return false;\n    \n  } catch (error) {\n    console.error('[Gofakeit] Unexpected error generating data for element:', element, error);\n    return false;\n  }\n}\n\n// ============================================================================\n// PROCESSING FUNCTIONS (Called by main functions)\n// ============================================================================\n\n// Query all form elements that can be autofilled\nfunction queryFormElements(container?: HTMLElement): Element[] {\n  const selector = 'input, textarea, select';\n  const nodeList = container ? container.querySelectorAll(selector) : document.querySelectorAll(selector);\n  const elements: Element[] = [];\n  nodeList.forEach((el) => {\n    if (el instanceof HTMLInputElement) {\n      if (el.type === 'hidden' || el.disabled || el.readOnly) return;\n      elements.push(el);\n    } else if (el instanceof HTMLTextAreaElement) {\n      if (el.disabled || el.readOnly) return;\n      elements.push(el);\n    } else if (el instanceof HTMLSelectElement) {\n      if (el.disabled) return;\n      elements.push(el);\n    }\n  });\n  return elements;\n}\n\nfunction isDataGofakeitFalse(el: Element): boolean {\n  const val = (el as Element).getAttribute && (el as Element).getAttribute('data-gofakeit');\n  return typeof val === 'string' && val.trim().toLowerCase() === 'false';\n}\n\n// Get unique elements, handling checkbox and radio groups\nfunction getUniqueElements(elements: Element[]): Element[] {\n  const uniqueElements: Element[] = [];\n  const processedGroups = new Set<string>();\n  \n  for (const element of elements) {\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      if (inputType === 'checkbox' || inputType === 'radio') {\n        const name = element.name;\n        if (name && processedGroups.has(name)) {\n          // Skip if we've already processed this group\n          continue;\n        }\n        if (name) {\n          processedGroups.add(name);\n        }\n      }\n    }\n    \n    uniqueElements.push(element);\n  }\n  \n  return uniqueElements;\n}\n\n// Process multiple elements and track results using batched API calls\nasync function processElements(elements: Element[], settings: AutofillSettings): Promise<{ success: number, failed: number }> {\n  let successfulCount = 0;\n  let failedCount = 0;\n  \n  // Get unique elements to avoid processing checkbox/radio groups multiple times\n  const uniqueElements = getUniqueElements(elements);\n\n  // Separate input elements from other elements\n  const searchInputElements: HTMLInputElement[] = [];\n  const otherElements: Element[] = [];\n  \n  for (const element of uniqueElements) {\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      if (needsSearchApi(inputType)) {\n        searchInputElements.push(element);\n      } else {\n        // For excluded input types, add them to otherElements to be processed by getElementFunction\n        otherElements.push(element);\n      }\n    } else {\n      otherElements.push(element);\n    }\n  }\n\n  // Use search API to get functions for all searchable input elements at once\n  let inputFunctionMap = new Map<HTMLInputElement, string>();\n  if (searchInputElements.length > 0) {\n    try {\n      inputFunctionMap = await searchFunctionsForInputs(searchInputElements);\n    } catch (error) {\n      console.warn('[Gofakeit Autofill] Search API failed, falling back to individual function detection:', error);\n      // Fallback to individual function detection\n      for (const element of searchInputElements) {\n        const func = await getElementFunction(element, settings);\n        if (func) {\n          inputFunctionMap.set(element, func);\n        }\n      }\n    }\n  }\n\n  // Process excluded elements individually (they don't use batch API)\n  const excludedElements: Element[] = [];\n  const batchElements: { element: Element, func: string }[] = [];\n  \n  // Add input elements with their search API functions to batch\n  searchInputElements.forEach(element => {\n    const func = inputFunctionMap.get(element);\n    if (func) {\n      batchElements.push({ element, func });\n    }\n  });\n  \n  // Process other elements (select, textarea, checkbox, radio, etc.)\n  for (const element of otherElements) {\n    try {\n      const func = await getElementFunction(element, settings);\n      if (func) {\n        // Check if this is an excluded type that should be processed individually\n        if (element instanceof HTMLInputElement) {\n          const inputType = element.type.toLowerCase();\n          if (['checkbox', 'radio', 'range', 'file', 'button', 'submit', 'reset', 'image', 'color'].includes(inputType)) {\n            // Process excluded types individually\n            excludedElements.push(element);\n            continue;\n          }\n        }\n        // Add to batch for other types (select, textarea, etc.)\n        batchElements.push({ element, func });\n      }\n    } catch (error) {\n      failedCount++;\n      console.warn(`[Gofakeit Autofill] Failed to get function for element:`, element, error);\n    }\n  }\n\n  // Process excluded elements with appropriate timing\n  const testMode = (globalThis as any).__GOFAKEIT_TEST_MODE__;\n  const staggered = testMode ? false : (settings.staggered ?? true);\n  \n  if (staggered) {\n    // Process excluded elements individually with staggered timing\n    for (let i = 0; i < excludedElements.length; i++) {\n      const element = excludedElements[i];\n      const staggerDelay = settings.staggerDelay ?? 50;\n      \n      if (i > 0) {\n        await new Promise(resolve => setTimeout(resolve, staggerDelay));\n      }\n      \n      try {\n        const success = await autofillElement(element, settings);\n        if (success) {\n          successfulCount++;\n        } else {\n          failedCount++;\n        }\n      } catch (error) {\n        failedCount++;\n        console.warn(`[Gofakeit Autofill] Failed to process excluded element:`, element, error);\n      }\n    }\n  } else {\n    // Process excluded elements all at once for fast mode\n    const promises = excludedElements.map(async (element) => {\n      try {\n        const success = await autofillElement(element, settings);\n        return success;\n      } catch (error) {\n        console.warn(`[Gofakeit Autofill] Failed to process excluded element:`, element, error);\n        return false;\n      }\n    });\n    \n    const results = await Promise.all(promises);\n    results.forEach(success => {\n      if (success) {\n        successfulCount++;\n      } else {\n        failedCount++;\n      }\n    });\n  }\n\n  // Process batch elements if any exist\n  if (batchElements.length === 0) {\n    return { success: successfulCount, failed: failedCount };\n  }\n\n  // Create batch requests\n  const requests: MultiFuncRequest[] = batchElements.map((item, index) => ({\n    id: `req_${index}`,\n    func: item.func\n  }));\n\n  // Make single batch API call\n  const batchResponse = await callMultiFunc(requests);\n  \n  if (!batchResponse.success || !batchResponse.data) {\n    console.error('[Gofakeit Autofill] Batch API call failed:', batchResponse.error);\n    return { success: successfulCount, failed: failedCount + batchElements.length };\n  }\n\n  // Process responses using existing handlers with staggered timing\n  for (let i = 0; i < batchElements.length; i++) {\n    const { element, func } = batchElements[i];\n    const response = batchResponse.data[i];\n    \n    // Add staggered delay for visual effect if enabled\n    const testMode = (globalThis as any).__GOFAKEIT_TEST_MODE__;\n    const staggered = testMode ? false : (settings.staggered ?? true);\n    const staggerDelay = settings.staggerDelay ?? 50;\n    if (staggered && i > 0) {\n      await new Promise(resolve => setTimeout(resolve, staggerDelay));\n    }\n    \n    if (response && response.value !== null && !response.error) {\n      try {\n        // Use the existing autofillElement function with the batch response value\n        const success = await autofillElementWithValue(element, func, response.value, settings);\n        if (success) {\n          successfulCount++;\n          \n          // Monitor if the value gets cleared after a short delay\n          setTimeout(() => {\n            if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n              if (element.value === '') {\n                console.warn('[Gofakeit Autofill] Value was cleared for element:', element);\n              }\n            } else if (element instanceof HTMLSelectElement) {\n              if (element.value === '') {\n                console.warn('[Gofakeit Autofill] Value was cleared for select:', element);\n              }\n            }\n          }, 1000);\n        } else {\n          failedCount++;\n        }\n      } catch (error) {\n        failedCount++;\n        console.warn(`[Gofakeit Autofill] Failed to apply value to element:`, element, error);\n      }\n    } else {\n      failedCount++;\n      console.warn(`[Gofakeit Autofill] API error for element:`, element, response?.error);\n    }\n  }\n\n  return { success: successfulCount, failed: failedCount };\n}\n\n// Get the function name for an element (same logic as autofillElement but returns function name)\nasync function getElementFunction(element: Element, settings: AutofillSettings): Promise<string | null> {\n  const gofakeitFunc = element.getAttribute('data-gofakeit');\n  if (typeof gofakeitFunc === 'string' && gofakeitFunc.trim().toLowerCase() === 'false') {\n    return null;\n  }\n  \n  const smartMode = settings.smart ?? true;\n  if (!gofakeitFunc && !smartMode) {\n    return null;\n  }\n\n  try {\n    // Handle select dropdowns\n    if (element instanceof HTMLSelectElement) {\n      return (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'word';\n    }\n    \n    // Handle textarea elements\n    if (element instanceof HTMLTextAreaElement) {\n      return getTextarea(gofakeitFunc || 'true');\n    }\n    \n    // Handle input elements\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      // Handle checkbox inputs\n      if (inputType === 'checkbox') {\n        return (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'bool';\n      }\n      \n      // Handle radio inputs\n      if (inputType === 'radio') {\n        return (gofakeitFunc && gofakeitFunc !== 'true') ? gofakeitFunc : 'true';\n      }\n      \n      // Handle range inputs\n      if (inputType === 'range') {\n        return getRangeInput(element);\n      }\n      \n      // For all other input types, use search API (this is a fallback for individual elements)\n      return await searchFunctionForInput(element);\n    }\n    \n    console.warn('[Gofakeit] Unsupported element type for batching:', element);\n    return null;\n    \n  } catch (error) {\n    console.error('[Gofakeit] Unexpected error getting function for element:', element, error);\n    return null;\n  }\n}\n\n// Show function badge with a slight delay for visual effect\nfunction showFunctionBadgeWithDelay(element: Element, func: string, settings?: AutofillSettings): void {\n  const testMode = (globalThis as any).__GOFAKEIT_TEST_MODE__;\n  const staggered = testMode ? false : (settings?.staggered ?? true);\n  const staggerDelay = settings?.staggerDelay ?? 50;\n  \n  // Add a subtle highlight effect when the field is filled\n  if (element instanceof HTMLElement) {\n    element.style.transition = 'background-color 0.3s ease';\n    element.style.backgroundColor = '#e8f5e8';\n    setTimeout(() => {\n      element.style.backgroundColor = '';\n    }, 500);\n  }\n  \n  // Only delay the badge if staggered is enabled, using the staggerDelay from settings\n  const actualDelay = staggered ? staggerDelay : 0;\n  setTimeout(() => {\n    showFunctionBadge(element, func);\n  }, actualDelay);\n}\n\n// Autofill an element with a pre-fetched value (for batch processing)\nasync function autofillElementWithValue(element: Element, func: string, value: string, settings?: AutofillSettings): Promise<boolean> {\n  try {\n    // Handle select dropdowns\n    if (element instanceof HTMLSelectElement) {\n      const { success, usedFunc } = await handleSelectWithFunction(element, func, value);\n      if (success) {\n        showFunctionBadgeWithDelay(element, usedFunc, settings);\n      }\n      return success;\n    }\n    \n    // Handle textarea elements\n    if (element instanceof HTMLTextAreaElement) {\n      setTextarea(element, value);\n      showFunctionBadgeWithDelay(element, func, settings);\n      return true;\n    }\n    \n    // Handle input elements\n    if (element instanceof HTMLInputElement) {\n      const inputType = element.type.toLowerCase();\n      \n      // Handle checkbox inputs\n      if (inputType === 'checkbox') {\n        const { success, usedFunc } = await handleCheckbox(element, func, value);\n        if (success) {\n          showFunctionBadgeWithDelay(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle radio inputs\n      if (inputType === 'radio') {\n        const { success, usedFunc } = await handleRadio(element, func, value);\n        if (success) {\n          showFunctionBadgeWithDelay(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle number inputs\n      if (inputType === 'number') {\n        setNumberInput(element, value);\n        showFunctionBadgeWithDelay(element, func, settings);\n        return true;\n      }\n      \n      // Handle range inputs\n      if (inputType === 'range') {\n        setRangeInput(element, value);\n        showFunctionBadgeWithDelay(element, func, settings);\n        return true;\n      }\n      \n      // Handle date/time inputs\n      if (inputType === 'date' || inputType === 'time' || inputType === 'datetime-local' || \n          inputType === 'month' || inputType === 'week') {\n        const { success, usedFunc } = await handleDateTimeInput(element, func, value);\n        if (success) {\n          showFunctionBadgeWithDelay(element, usedFunc, settings);\n        }\n        return success;\n      }\n      \n      // Handle text inputs (text, email, tel, password, search, url, color, etc.)\n      setTextInput(element, value);\n      showFunctionBadgeWithDelay(element, func, settings);\n      return true;\n    }\n    \n    console.warn('[Gofakeit] Unsupported element type:', element);\n    return false;\n    \n  } catch (error) {\n    console.error('[Gofakeit] Unexpected error generating data for element:', element, error);\n    return false;\n  }\n}\n\n// Show results notification\nfunction showResults(successfulCount: number, failedCount: number, context: string): void {\n  // Show successful count notification\n  if (successfulCount > 0) {\n    console.log(`[Gofakeit] ${context} completed successfully for ${successfulCount} fields`);\n    showNotification(`Successfully generated data for ${successfulCount} fields!`, 'success');\n  }\n  \n  // Show failed count notification\n  if (failedCount > 0) {\n    console.error(`[Gofakeit] ${context} failed for ${failedCount} fields`);\n    showNotification(`Failed to generate data for ${failedCount} fields.`, 'error');\n  }\n  \n  // If no fields were processed at all\n  if (successfulCount === 0 && failedCount === 0) {\n    console.log(`[Gofakeit] ${context} - no fields were processed`);\n    showNotification(`No fields were processed.`, 'info');\n  }\n}\n\n// ============================================================================\n// UTILITY FUNCTIONS (Called by various functions)\n// ============================================================================\n\n// Handle error display and field highlighting\nexport function handleError(element: Element, error: string, functionName?: string): void {\n  if (element instanceof HTMLElement) {\n    element.style.border = `2px solid ${GOFAKEIT_COLORS.error}`;\n    \n    setTimeout(() => {\n      element.style.border = '';\n    }, 5000);\n  }\n  \n  const message = functionName ? `Invalid function: ${functionName}` : error;\n  showFieldError(element, message);\n}\n\n// Check if an element contains form fields with data-gofakeit attributes\nexport function hasFormFields(element: HTMLElement): boolean {\n  const formFields = element.querySelectorAll('input[data-gofakeit], textarea[data-gofakeit], select[data-gofakeit]');\n  return formFields.length > 0;\n}\n\n// Check if an element is a form field with data-gofakeit attribute\nexport function isFormField(element: HTMLElement): boolean {\n  return (\n    (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA' || element.tagName === 'SELECT') &&\n    element.hasAttribute('data-gofakeit')\n  );\n}\n\n// Global tracking of active function badges\nconst activeBadges = new Map<Element, { badge: HTMLElement; timeout: ReturnType<typeof setTimeout>; cleanup: () => void }>();\n\n// Remove existing badges for a specific element\nfunction removeExistingBadges(element: Element): void {\n  // For radio buttons, remove badges for all radio buttons in the same group\n  if (element instanceof HTMLInputElement && element.type === 'radio' && element.name) {\n    const radioGroup = document.querySelectorAll(`input[type=\"radio\"][name=\"${element.name}\"]`);\n    radioGroup.forEach(radio => {\n      const existing = activeBadges.get(radio);\n      if (existing) {\n        clearTimeout(existing.timeout);\n        existing.cleanup();\n        activeBadges.delete(radio);\n      }\n    });\n  } else {\n    // For other elements, just remove the badge for this specific element\n    const existing = activeBadges.get(element);\n    if (existing) {\n      clearTimeout(existing.timeout);\n      existing.cleanup();\n      activeBadges.delete(element);\n    }\n  }\n}\n\n// Display a small badge showing the function used for this field\nexport function showFunctionBadge(element: Element, funcName: string): void {\n  if (!(element instanceof HTMLElement)) return;\n\n  // Remove any existing badges for this element\n  removeExistingBadges(element);\n\n  const badge = document.createElement('div');\n  badge.textContent = funcName;\n  badge.style.position = 'fixed';\n  badge.style.background = GOFAKEIT_COLORS.primary;\n  badge.style.color = '#000';\n  badge.style.fontFamily = 'Arial, sans-serif';\n  badge.style.fontSize = '11px';\n  badge.style.padding = '3px 8px';\n  badge.style.borderRadius = '6px';\n  badge.style.boxShadow = '0 2px 6px rgba(0,0,0,0.25)';\n  badge.style.zIndex = '2147483647';\n  badge.style.opacity = '0';\n  badge.style.transform = 'translateY(-6px)';\n  badge.style.transition = 'opacity 200ms ease, transform 200ms ease';\n  badge.style.pointerEvents = 'none';\n\n  const updatePosition = () => {\n    const rect = element.getBoundingClientRect();\n    const vh = window.innerHeight || document.documentElement.clientHeight;\n    const vw = window.innerWidth || document.documentElement.clientWidth;\n\n    // If the element is completely out of the viewport, hide the badge entirely\n    const outOfView = rect.bottom <= 0 || rect.top >= vh || rect.right <= 0 || rect.left >= vw;\n    if (outOfView) {\n      badge.style.display = 'none';\n      return;\n    }\n\n    // Otherwise, ensure it's visible and position above-left of the field\n    if (badge.style.display === 'none') badge.style.display = 'block';\n    const top = rect.top - 8;\n    const left = rect.left;\n    badge.style.top = `${top}px`;\n    badge.style.left = `${left}px`;\n  };\n\n  document.body.appendChild(badge);\n  updatePosition();\n\n  // Animate in\n  requestAnimationFrame(() => {\n    badge.style.opacity = '1';\n    badge.style.transform = 'translateY(-12px)';\n  });\n\n  // Track movement while visible\n  const onScroll = () => updatePosition();\n  const onResize = () => updatePosition();\n  window.addEventListener('scroll', onScroll, true);\n  window.addEventListener('resize', onResize, true);\n\n  // Observe element size/position changes\n  let ro: ResizeObserver | null = null;\n  if (typeof ResizeObserver !== 'undefined') {\n    ro = new ResizeObserver(() => updatePosition());\n    try { ro.observe(element); } catch { /* ignore */ }\n  }\n\n  // Create cleanup function\n  const cleanup = () => {\n    window.removeEventListener('scroll', onScroll, true);\n    window.removeEventListener('resize', onResize, true);\n    if (ro) {\n      try { ro.disconnect(); } catch { /* ignore */ }\n      ro = null;\n    }\n    if (badge.parentNode) badge.parentNode.removeChild(badge);\n    activeBadges.delete(element);\n  };\n\n  // Animate out and remove after extended delay\n  const DISPLAY_MS = 6000;\n  const timeout = setTimeout(() => {\n    badge.style.opacity = '0';\n    badge.style.transform = 'translateY(-6px)';\n    setTimeout(cleanup, 220);\n  }, DISPLAY_MS);\n\n  // Track this badge\n  activeBadges.set(element, { badge, timeout, cleanup });\n}\n\n// Extract nearby/associated label text for context\nfunction getAssociatedLabelText(input: HTMLInputElement): string {\n  const texts: string[] = [];\n  const id = input.id;\n  // aria-labelledby\n  const labelledBy = input.getAttribute('aria-labelledby');\n  if (labelledBy) {\n    labelledBy.split(/\\s+/).forEach((ref) => {\n      const el = document.getElementById(ref);\n      if (el && el.textContent) texts.push(el.textContent);\n    });\n  }\n  // explicit label[for]\n  if (id) {\n    try {\n      const lbl = document.querySelector('label[for=\"' + id.replace(/\"/g, '\\\\\"') + '\"]') as HTMLLabelElement | null;\n      if (lbl && lbl.textContent) texts.push(lbl.textContent);\n    } catch { /* ignore */ }\n  }\n  // implicit parent label\n  const closestLabel = input.closest('label');\n  if (closestLabel && closestLabel.textContent) texts.push(closestLabel.textContent);\n  // previous sibling label (common in some UIs)\n  const prev = input.previousElementSibling as HTMLElement | null;\n  if (prev && prev.tagName === 'LABEL' && prev.textContent) texts.push(prev.textContent);\n  return texts.join(' ').toLowerCase();\n}\n\n// Determine if an input type needs search API for function detection\nfunction needsSearchApi(inputType: string): boolean {\n  // These input types have their own specific handling and don't need search API\n  const skipSearchTypes = ['checkbox', 'radio', 'select', 'range', 'file', 'button', 'submit', 'reset', 'image', 'color'];\n  return !skipSearchTypes.includes(inputType);\n}\n\n// Get a default function for input types that don't need search API\nfunction getDefaultFunctionForInputType(inputType: string): string {\n  switch (inputType) {\n    case 'checkbox':\n    case 'radio':\n    case 'select':\n      return 'true';\n    case 'range':\n      return 'number?min=0&max=100';\n    case 'file':\n      return 'word';\n    case 'button':\n    case 'submit':\n    case 'reset':\n    case 'image':\n      return 'word';\n    case 'color':\n      return 'hexcolor';\n    default:\n      return 'word';\n  }\n}\n\n// Get type-specific fallback functions for when search API doesn't find good matches\nfunction getTypeSpecificFallback(inputType: string): string {\n  switch (inputType) {\n    case 'email':\n      return 'email';\n    case 'tel':\n      return 'phone';\n    case 'number':\n      return 'number';\n    case 'date':\n      return 'date';\n    case 'time':\n      return 'time';\n    case 'datetime-local':\n      return 'datetime';\n    case 'month':\n      return 'month';\n    case 'week':\n      return 'week';\n    case 'url':\n      return 'url';\n    case 'password':\n      return 'password';\n    case 'search':\n      return 'word';\n    case 'color':\n      return 'color';\n    case 'text':\n    default:\n      return 'word';\n  }\n}\n\n// Create a comprehensive search query from input field characteristics\nfunction createSearchQuery(input: HTMLInputElement): string {\n  const type = input.type.toLowerCase();\n  const name = (input.name || '').toLowerCase();\n  const id = (input.id || '').toLowerCase();\n  const placeholder = (input.placeholder || '').toLowerCase();\n  const autocomplete = (input.autocomplete || '').toLowerCase();\n  const ariaLabel = (input.getAttribute('aria-label') || '').toLowerCase();\n  const labelText = getAssociatedLabelText(input);\n\n  // Build a comprehensive search query with all available information\n  const queryParts = [\n    type,\n    name,\n    id,\n    placeholder,\n    autocomplete,\n    ariaLabel,\n    labelText\n  ].filter(part => part && part.trim());\n\n  // Join all parts with spaces to create a comprehensive search query\n  const searchQuery = queryParts.join(' ').toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ') // Remove special characters\n    .replace(/\\s+/g, ' ') // Normalize whitespace\n    .trim();\n\n  return searchQuery || 'text input';\n}\n\n// Search for functions using the API endpoint based on input field characteristics\nasync function searchFunctionForInput(input: HTMLInputElement): Promise<string> {\n  const type = input.type.toLowerCase();\n  \n  // Skip search API for input types that don't need it\n  if (!needsSearchApi(type)) {\n    return getDefaultFunctionForInputType(type);\n  }\n\n  const searchQuery = createSearchQuery(input);\n\n  try {\n    const searchRequest: FuncSearchRequest = {\n      id: input.id || input.name || `input_${Date.now()}`,\n      query: searchQuery\n    };\n\n    const response = await searchMultiFunc([searchRequest]);\n    \n    if (response.success && response.data && response.data.length > 0) {\n      const searchResult = response.data[0];\n      if (searchResult.results && searchResult.results.length > 0) {\n        // Return the highest scoring function\n        const bestMatch = searchResult.results[0];\n        return bestMatch.name;\n      }\n    }\n  } catch (error) {\n    console.warn('[Gofakeit] Function search failed, falling back to default function:', error);\n  }\n\n  // Fallback to default function if search fails\n  return getDefaultFunctionForInputType(type);\n}\n\n// Search for functions for multiple inputs using the API endpoint\nexport async function searchFunctionsForInputs(inputs: HTMLInputElement[]): Promise<Map<HTMLInputElement, string>> {\n  const functionMap = new Map<HTMLInputElement, string>();\n  \n  if (inputs.length === 0) {\n    return functionMap;\n  }\n\n  try {\n    // Create search requests for all inputs using the shared createSearchQuery function\n    const searchRequests: FuncSearchRequest[] = inputs.map((input, index) => {\n      const searchQuery = createSearchQuery(input);\n      \n      return {\n        id: input.id || input.name || `input_${index}`,\n        query: searchQuery\n      };\n    });\n\n    const response = await searchMultiFunc(searchRequests);\n    \n    if (response.success && response.data) {\n      // Map results back to inputs with improved fallback logic\n      for (let i = 0; i < response.data.length; i++) {\n        const searchResult = response.data[i];\n        const input = inputs[i];\n        const inputType = input.type.toLowerCase();\n        \n        if (searchResult.results && searchResult.results.length > 0) {\n          const bestMatch = searchResult.results[0];\n          // Only use the search result if it has a reasonable score\n          if (bestMatch.score >= 100) {\n            functionMap.set(input, bestMatch.name);\n          } else {\n            // Use type-specific fallback for low-scoring results\n            functionMap.set(input, getTypeSpecificFallback(inputType));\n          }\n        } else {\n          // Fallback to type-specific function if no search results\n          functionMap.set(input, getTypeSpecificFallback(inputType));\n        }\n      }\n    } else {\n      // Fallback to default functions for all inputs if search fails\n      for (const input of inputs) {\n        functionMap.set(input, getDefaultFunctionForInputType(input.type.toLowerCase()));\n      }\n    }\n  } catch (error) {\n    console.warn('[Gofakeit] Multi-function search failed, falling back to default functions:', error);\n    // Fallback to default functions for all inputs\n    for (const input of inputs) {\n      functionMap.set(input, getDefaultFunctionForInputType(input.type.toLowerCase()));\n    }\n  }\n\n  return functionMap;\n}\n\n// Find the closest container that has form fields with data-gofakeit attributes\nexport function findFormContainer(element: HTMLElement): HTMLElement | null {\n  // Check if the current element has form fields\n  if (hasFormFields(element)) {\n    return element;\n  }\n  \n  // Check parent elements\n  let parent = element.parentElement;\n  while (parent) {\n    if (hasFormFields(parent)) {\n      return parent;\n    }\n    parent = parent.parentElement;\n  }\n  \n  return null;\n}\n\n// Simple notification function (can be overridden by the consuming application)\nfunction showNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): void {\n  console.log(`[Gofakeit ${type.toUpperCase()}] ${message}`);\n}\n"],"names":["GOFAKEIT_COLORS","GOFAKEIT_SPACING","GOFAKEIT_BORDER","GOFAKEIT_FONT","showFieldError","element","message","existingError","tooltip","updateTooltipPosition","rect","scrollTop","scrollLeft","left","top","scrollHandler","resizeHandler","scrollableElements","scrollableListeners","el","style","listener","handler","GOFAKEIT_API_BASE","callFunc","func","questionMarkIndex","functionName","queryString","params","searchParams","key","value","numValue","makeRequest","fetchRandomString","strings","callMultiFunc","requests","processedRequests","req","index","id","makeMultiRequest","searchMultiFunc","makeSearchRequest","method","url","body","options","response","error","getDateTimeInput","gofakeitFunc","inputType","setDateTimeInput","generateTime","hourResponse","minuteResponse","hour","minute","generateMonth","yearResponse","monthResponse","month","generateWeek","weekYearResponse","weekResponse","week","getISOWeek","date","d","week1","handleDateTimeInput","functionToCall","finalValue","handleError","dateMatch","datetimeMatch","year","getTextInput","setTextInput","handleTextInput","getTextarea","setTextarea","handleTextarea","handleCheckbox","checkboxGroup","findCheckboxGroup","cb","numToSelect","selectedIndices","i","boolResponse","availableIndices","_","randomIndex","values","v","shouldCheck","handleRadio","radioGroup","findRadioGroup","rb","selectedRadio","name","container","handleSelectWithFunction","option","val","opt","validOptions","randomOption","selectedValues","remainingOptions","getNumberInput","setNumberInput","handleNumberInput","getRangeInput","min","max","setRangeInput","clampedValue","handleRangeInput","autofill","target","settings","finalSettings","autofillAll","hasFormFields","autofillContainer","success","autofillElement","showNotification","findFormContainer","elements","queryFormElements","smartMode","targets","isDataGofakeitFalse","results","processElements","showResults","funcToUse","usedFunc","showFunctionBadgeWithDelay","passToHandler","selectedElement","inferred","searchFunctionForInput","selector","nodeList","getUniqueElements","uniqueElements","processedGroups","successfulCount","failedCount","searchInputElements","otherElements","needsSearchApi","inputFunctionMap","searchFunctionsForInputs","getElementFunction","excludedElements","batchElements","staggerDelay","resolve","promises","item","batchResponse","staggered","autofillElementWithValue","showFunctionBadge","context","activeBadges","removeExistingBadges","radio","existing","funcName","badge","updatePosition","vh","vw","onScroll","onResize","ro","cleanup","timeout","getAssociatedLabelText","input","texts","labelledBy","ref","lbl","closestLabel","prev","getDefaultFunctionForInputType","getTypeSpecificFallback","createSearchQuery","type","placeholder","autocomplete","ariaLabel","labelText","part","searchQuery","searchRequest","searchResult","inputs","functionMap","searchRequests","bestMatch","parent"],"mappings":"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"}